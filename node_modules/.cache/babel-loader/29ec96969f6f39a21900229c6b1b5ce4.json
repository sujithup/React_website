{"ast":null,"code":"import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/extends';\nimport { useRef, useEffect, useReducer, useCallback, useLayoutEffect } from 'react';\nimport { dequal } from 'dequal/lite';\n\nvar useLatest = function (val) {\n  var ref = useRef(val);\n  useEffect(function () {\n    ref.current = val;\n  });\n  return ref;\n};\n\nvar arrayToMap = function (arr) {\n  return arr.reduce(function (obj, key) {\n    obj[key] = true;\n    return obj;\n  }, {});\n};\n\nvar isObject = function (value) {\n  return value !== null && typeof value === \"object\";\n};\n\nvar isFileList = function (value) {\n  return value instanceof FileList;\n};\n\nvar cloneObject = function cloneObject(object) {\n  if (object instanceof Event) throw new Error(\"Unable to clone event.\");\n  if (!isObject(object) || isFileList(object)) return object;\n  if (object instanceof Date) return new Date(object.getTime());\n  if (Array.isArray(object)) return object.map(function (val) {\n    return cloneObject(val);\n  });\n  if (isObject(object)) return Object.keys(object).reduce(function (obj, key) {\n    obj[key] = cloneObject(object[key]);\n    return obj;\n  }, {});\n  throw new Error(\"Unable to clone object.\");\n};\n\nvar compact = function (arr) {\n  return arr.filter(Boolean);\n};\n\nvar isPlainObject = function (value) {\n  return !Array.isArray(value) && !(value instanceof Date) && isObject(value);\n};\n\nvar deepMerge = function deepMerge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (prev, obj) {\n    Object.keys(obj).forEach(function (key) {\n      var prevValue = prev[key];\n      var currValue = obj[key];\n\n      if (Array.isArray(prevValue) && Array.isArray(currValue)) {\n        prev[key] = [].concat(prevValue, currValue);\n      } else if (isPlainObject(prevValue) && isPlainObject(currValue)) {\n        prev[key] = deepMerge(prevValue, currValue);\n      } else {\n        prev[key] = currValue;\n      }\n    });\n    return prev;\n  }, {});\n};\n\nvar isUndefined = function (value) {\n  return value === undefined;\n};\n\nvar filterErrors = function filterErrors(error, touched) {\n  if (!isPlainObject(error)) return touched ? error : undefined;\n  return Object.keys(error).reduce(function (obj, key) {\n    var nextErrors = filterErrors(error[key], touched[key] || false);\n\n    if (!isUndefined(nextErrors)) {\n      obj[key] = nextErrors;\n    } else {\n      delete obj[key];\n    }\n\n    return obj;\n  }, {});\n};\n\nvar stringToPath = function (str) {\n  if (typeof str !== \"string\") throw new TypeError(\"Expected a string.\");\n  if (!str.length) return [];\n  return compact(str.split(/[.[\\]]+/));\n};\n\nvar get = function (object, path, defaultValue) {\n  if (!isPlainObject(object) || !path) return defaultValue;\n  var value = stringToPath(path).reduce(function (obj, key) {\n    return (obj || {})[key];\n  }, object);\n  return isUndefined(value) ? defaultValue : value;\n};\n\nvar getIsDirty = function getIsDirty(dirty) {\n  var search = function search(dty, found) {\n    if (found === void 0) {\n      found = [];\n    }\n\n    for (var _i = 0, _Object$values = Object.values(dty); _i < _Object$values.length; _i++) {\n      var val = _Object$values[_i];\n\n      if (val === true) {\n        found.push(val);\n        return found;\n      }\n\n      if (isPlainObject(val)) search(val, found);\n    }\n\n    return found;\n  };\n\n  return !!search(dirty).length;\n};\n\nvar isFunction = function (value) {\n  return typeof value === \"function\";\n};\n\nvar isAsyncFunction = function (value) {\n  return isFunction(value) && value.constructor.name === \"AsyncFunction\";\n};\n\nvar isCheckboxInput = function (field) {\n  return field.type === \"checkbox\";\n};\n\nvar isEmptyObject = function (value) {\n  return isPlainObject(value) && !Object.keys(value).length;\n};\n\nvar isFieldElement = function (element) {\n  return /INPUT|TEXTAREA|SELECT/.test(element.tagName);\n};\n\nvar isFileInput = function (field) {\n  return field.type === \"file\";\n};\n\nvar isInputElement = function (element) {\n  return element.tagName === \"INPUT\";\n};\n\nvar isMultipleSelect = function (field) {\n  return field.type === \"select-multiple\";\n};\n\nvar isNumberInput = function (field) {\n  return field.type === \"number\";\n};\n\nvar isRadioInput = function (field) {\n  return field.type === \"radio\";\n};\n\nvar isRangeInput = function (field) {\n  return field.type === \"range\";\n};\n\nvar runWithLowPriority = function (callback) {\n  return (window.requestIdleCallback || function (cb) {\n    var start = Date.now();\n    return setTimeout(function () {\n      return cb({\n        didTimeout: false,\n        timeRemaining: function timeRemaining() {\n          return Math.max(0, 50 - (Date.now() - start));\n        }\n      });\n    }, 1);\n  })(callback, {\n    timeout: 2000\n  });\n};\n\nvar set = function (object, path, value, immutable) {\n  if (immutable === void 0) {\n    immutable = false;\n  }\n\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n  var segs = stringToPath(path);\n  var newObject = immutable ? cloneObject(object) : object;\n  segs.slice(0, -1).reduce(function (obj, key, idx) {\n    var nextIsNumber = !Number.isNaN(Number(segs[idx + 1]));\n    if (isPlainObject(obj[key]) && !nextIsNumber) return obj[key];\n    obj[key] = nextIsNumber ? [] : {};\n    return obj[key];\n  }, newObject)[segs[segs.length - 1] || \"\"] = value;\n  return newObject;\n};\n/* eslint-disable no-prototype-builtins */\n\n\nvar unset = function (object, path, immutable) {\n  if (immutable === void 0) {\n    immutable = false;\n  }\n\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n  var refObject = immutable ? cloneObject(object) : object;\n  var newObject = refObject;\n\n  if (newObject.hasOwnProperty(path)) {\n    delete newObject[path];\n    return refObject;\n  }\n\n  var segs = stringToPath(path);\n  if (!segs.length) return refObject;\n  var last = segs.pop();\n  var target = segs.reduce(function (obj, key) {\n    return (obj || {})[key];\n  }, newObject);\n  if (isObject(target) && target.hasOwnProperty(last)) delete target[last];\n  return refObject;\n};\n\nvar warn = function () {\n  var _console;\n\n  if (process.env.NODE_ENV !== \"production\") (_console = console).warn.apply(_console, arguments);\n};\n\nvar useState = function (initialState, onChange) {\n  var _useReducer = useReducer(function (c) {\n    return c + 1;\n  }, 0),\n      forceUpdate = _useReducer[1];\n\n  var stateRef = useRef(initialState);\n  var usedStateRef = useRef({});\n  var onChangeRef = useLatest(onChange || function () {\n    return undefined;\n  });\n  var setStateRef = useCallback(function (path, value, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        fieldPath = _ref.fieldPath,\n        _ref$shouldUpdate = _ref.shouldUpdate,\n        shouldUpdate = _ref$shouldUpdate === void 0 ? true : _ref$shouldUpdate;\n\n    var key = path.split(\".\")[0];\n\n    if (!key) {\n      if (!dequal(stateRef.current, value)) {\n        stateRef.current = value;\n        forceUpdate();\n        onChangeRef.current(stateRef.current);\n      }\n\n      return;\n    }\n\n    if (path !== \"values\" && key === \"values\" || !dequal(get(stateRef.current, path), value)) {\n      var state = set(stateRef.current, path, value, true);\n      var errors = state.errors,\n          dirty = state.dirty,\n          prevIsDirty = state.isDirty,\n          prevIsValid = state.isValid;\n      var prevSubmitCount = state.submitCount;\n      var isDirty = key === \"dirty\" ? getIsDirty(dirty) : prevIsDirty;\n      var isValid = key === \"errors\" ? isEmptyObject(errors) : prevIsValid;\n      var submitCount = key === \"isSubmitting\" && value ? prevSubmitCount += 1 : prevSubmitCount;\n      stateRef.current = _extends({}, state, {\n        isDirty: isDirty,\n        isValid: isValid,\n        submitCount: submitCount\n      });\n      path = fieldPath || path;\n\n      if (shouldUpdate && (Object.keys(usedStateRef.current).some(function (k) {\n        return path.startsWith(k) || k.startsWith(path);\n      }) || usedStateRef.current.isDirty && isDirty !== prevIsDirty || usedStateRef.current.isValid && isValid !== prevIsValid)) {\n        forceUpdate();\n        onChangeRef.current(stateRef.current);\n      }\n    }\n  }, [onChangeRef]);\n  var setUsedStateRef = useCallback(function (path, unset) {\n    if (unset === void 0) {\n      unset = false;\n    }\n\n    if (unset) {\n      delete usedStateRef.current[path];\n    } else {\n      usedStateRef.current[path] = true;\n    }\n  }, []);\n  return {\n    stateRef: stateRef,\n    setStateRef: setStateRef,\n    setUsedStateRef: setUsedStateRef\n  };\n};\n\nvar useIsoLayoutEffect = typeof window === \"undefined\" ? useEffect : useLayoutEffect;\n\nvar useForm = function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$defaultValues = _ref.defaultValues,\n      defaultValues = _ref$defaultValues === void 0 ? {} : _ref$defaultValues,\n      validate = _ref.validate,\n      _ref$validateOnChange = _ref.validateOnChange,\n      validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,\n      _ref$validateOnBlur = _ref.validateOnBlur,\n      validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,\n      _ref$builtInValidatio = _ref.builtInValidationMode,\n      builtInValidationMode = _ref$builtInValidatio === void 0 ? \"message\" : _ref$builtInValidatio,\n      _ref$shouldRemoveFiel = _ref.shouldRemoveField,\n      shouldRemoveField = _ref$shouldRemoveFiel === void 0 ? true : _ref$shouldRemoveFiel,\n      _ref$excludeFields = _ref.excludeFields,\n      excludeFields = _ref$excludeFields === void 0 ? [] : _ref$excludeFields,\n      onReset = _ref.onReset,\n      onSubmit = _ref.onSubmit,\n      onError = _ref.onError,\n      debug = _ref.debug;\n\n  var isInitRef = useRef(true);\n  var formRef = useRef(null);\n  var fieldsRef = useRef({});\n  var fieldArgsRef = useRef({});\n  var controllersRef = useRef({});\n  var excludeFieldsRef = useRef(arrayToMap(excludeFields));\n  var changedFieldRef = useRef();\n  var formValidatorRef = useLatest(validate);\n  var fieldValidatorsRef = useRef({});\n  var onResetRef = useLatest(onReset || function () {\n    return undefined;\n  });\n  var onSubmitRef = useLatest(onSubmit || function () {\n    return undefined;\n  });\n  var onErrorRef = useLatest(onError || function () {\n    return undefined;\n  });\n  var defaultValuesRef = useRef(defaultValues);\n  var initialStateRef = useRef({\n    values: defaultValuesRef.current,\n    touched: {},\n    errors: {},\n    isDirty: false,\n    dirty: {},\n    isValidating: false,\n    isValid: true,\n    isSubmitting: false,\n    isSubmitted: false,\n    submitCount: 0\n  });\n\n  var _useState = useState(initialStateRef.current, debug),\n      stateRef = _useState.stateRef,\n      setStateRef = _useState.setStateRef,\n      setUsedStateRef = _useState.setUsedStateRef;\n\n  var getFields = useCallback(function (form) {\n    return Array.from(form.querySelectorAll(\"input,textarea,select\")).filter(function (element) {\n      var field = element;\n      var type = field.type,\n          name = field.name,\n          rcfExclude = field.dataset.rcfExclude;\n      if (/button|image|submit|reset/.test(type)) return false;\n\n      if (rcfExclude && !name) {\n        warn('💡 react-cool-form > field: Missing the \"name\" attribute.');\n        return false;\n      }\n\n      return controllersRef.current[name] || !(rcfExclude || excludeFieldsRef.current[name]);\n    }).reduce(function (acc, cur) {\n      var field = cur;\n      var name = field.name;\n      acc[name] = _extends({}, acc[name], {\n        field: cur\n      });\n      if (isCheckboxInput(field) || isRadioInput(field)) acc[name].options = acc[name].options ? [].concat(acc[name].options, [cur]) : [cur];\n      return acc;\n    }, {});\n  }, []);\n  var handleUnset = useCallback(function (path, fieldPath, target, name) {\n    return setStateRef(path, unset(target, name, true), {\n      fieldPath: fieldPath\n    });\n  }, [setStateRef]);\n  var fieldRef = useCallback(function (validateOrOptions) {\n    return function (field) {\n      if (!(field != null && field.name) || controllersRef.current[field.name] || excludeFieldsRef.current[field.name]) return;\n\n      if (isFunction(validateOrOptions)) {\n        fieldValidatorsRef.current[field.name] = validateOrOptions;\n        return;\n      }\n\n      var validator = validateOrOptions.validate,\n          parsers = _objectWithoutPropertiesLoose(validateOrOptions, [\"validate\"]);\n\n      if (validator) fieldValidatorsRef.current[field.name] = validator;\n      fieldArgsRef.current[field.name] = parsers;\n    };\n  }, []);\n  var getNodeValue = useCallback(function (name) {\n    var _find;\n\n    var _fieldsRef$current$na = fieldsRef.current[name],\n        field = _fieldsRef$current$na.field,\n        options = _fieldsRef$current$na.options;\n    var value = field.value;\n\n    if (isInputElement(field)) {\n      var _fieldArgsRef$current, _fieldArgsRef$current2;\n\n      if ((_fieldArgsRef$current = fieldArgsRef.current[name]) != null && _fieldArgsRef$current.valueAsNumber) {\n        value = field.valueAsNumber;\n        return value;\n      }\n\n      if ((_fieldArgsRef$current2 = fieldArgsRef.current[name]) != null && _fieldArgsRef$current2.valueAsDate) {\n        value = field.valueAsDate;\n        return value;\n      }\n    }\n\n    if (isNumberInput(field) || isRangeInput(field)) value = field.valueAsNumber || \"\";\n\n    if (isCheckboxInput(field)) {\n      if (options) {\n        var checkboxes = options;\n\n        if (options.length > 1) {\n          value = checkboxes.filter(function (checkbox) {\n            return checkbox.checked;\n          }).map(function (checkbox) {\n            return checkbox.value;\n          });\n        } else {\n          value = checkboxes[0].checked;\n        }\n      } else {\n        var checkValues = get(stateRef.current.values, field.name);\n\n        if (Array.isArray(checkValues)) {\n          checkValues = new Set(checkValues);\n\n          if (field.checked) {\n            checkValues.add(value);\n          } else {\n            checkValues[\"delete\"](value);\n          }\n\n          value = Array.from(checkValues);\n        } else {\n          value = field.checked;\n        }\n      }\n    }\n\n    if (isRadioInput(field) && options) value = ((_find = options.find(function (radio) {\n      return radio.checked;\n    })) == null ? void 0 : _find.value) || \"\";\n    if (isMultipleSelect(field) && !options) value = Array.from(field.options).filter(function (option) {\n      return option.selected;\n    }).map(function (option) {\n      return option.value;\n    });\n    if (isFileInput(field)) value = field.files;\n    return value;\n  }, [stateRef]);\n  var setNodeValue = useCallback(function (name, value) {\n    if (!fieldsRef.current[name] || controllersRef.current[name]) return;\n    var _fieldsRef$current$na2 = fieldsRef.current[name],\n        field = _fieldsRef$current$na2.field,\n        options = _fieldsRef$current$na2.options;\n\n    if (isCheckboxInput(field)) {\n      var checkboxes = options;\n\n      if (checkboxes.length > 1) {\n        checkboxes.forEach(function (checkbox) {\n          checkbox.checked = Array.isArray(value) ? value.includes(checkbox.value) : !!value;\n        });\n      } else {\n        checkboxes[0].checked = !!value;\n      }\n    } else if (isRadioInput(field)) {\n      options.forEach(function (radio) {\n        radio.checked = radio.value === value;\n      });\n    } else if (isMultipleSelect(field) && Array.isArray(value)) {\n      Array.from(field.options).forEach(function (option) {\n        option.selected = !!value.includes(option.value);\n      });\n    } else if (isFileInput(field)) {\n      if (isFileList(value)) field.files = value;\n      if (!value) field.value = \"\";\n    } else {\n      field.value = value != null ? value : \"\";\n    }\n  }, []);\n  var setDefaultValue = useCallback(function (name, value) {\n    if (!isUndefined(get(initialStateRef.current.values, name))) return;\n    initialStateRef.current.values = set(initialStateRef.current.values, name, value, true);\n    setStateRef(\"values.\" + name, get(initialStateRef.current.values, name), {\n      shouldUpdate: !isInitRef.current\n    });\n  }, [setStateRef]);\n  var setNodesOrStateValue = useCallback(function (values, checkDefaultValues, fields) {\n    if (checkDefaultValues === void 0) {\n      checkDefaultValues = false;\n    }\n\n    if (fields === void 0) {\n      fields = Object.values(fieldsRef.current);\n    }\n\n    return fields.forEach(function (field) {\n      var name = isPlainObject(field) ? field.field.name : field;\n      if (controllersRef.current[name]) return;\n      var value = get(values, name);\n      if (!isUndefined(value)) setNodeValue(name, value);\n\n      if (checkDefaultValues) {\n        var defaultValue = get(defaultValuesRef.current, name);\n        setDefaultValue(name, !isUndefined(defaultValue) ? defaultValue : getNodeValue(name));\n      }\n    });\n  }, [getNodeValue, setDefaultValue, setNodeValue]);\n  var getState = useCallback(function (path, _temp2) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        target = _ref2.target,\n        _ref2$watch = _ref2.watch,\n        watch = _ref2$watch === void 0 ? true : _ref2$watch,\n        _ref2$errorWithTouche = _ref2.errorWithTouched,\n        errorWithTouched = _ref2$errorWithTouche === void 0 ? false : _ref2$errorWithTouche;\n\n    if (!path) return undefined;\n\n    var getPath = function getPath(p) {\n      if (p === \"values\" && !target && watch) warn('💡 react-cool-form > getState: Get the \"values\" alone may cause unnecessary re-renders. If you know what you\\'re doing, please ignore this warning. See: https://react-cool-form.netlify.app/docs/getting-started/form-state#best-practices');\n      p = target ? target + \".\" + p : p;\n      if (watch) setUsedStateRef(p);\n      return p;\n    };\n\n    var errorsEnhancer = function errorsEnhancer(p, state) {\n      if (!watch || !errorWithTouched || !p.startsWith(\"errors\") || !state || isEmptyObject(state)) return state;\n      p = p.replace(\"errors\", \"touched\");\n      setUsedStateRef(p);\n      return filterErrors(state, get(stateRef.current, p));\n    };\n\n    var state;\n\n    if (Array.isArray(path)) {\n      state = path.map(function (p) {\n        p = getPath(p);\n        return errorsEnhancer(p, get(stateRef.current, p));\n      });\n    } else if (isPlainObject(path)) {\n      var paths = path;\n      state = Object.keys(paths).reduce(function (s, key) {\n        path = getPath(paths[key]);\n        s[key] = errorsEnhancer(path, get(stateRef.current, path));\n        return s;\n      }, {});\n    } else {\n      path = getPath(path);\n      state = errorsEnhancer(path, get(stateRef.current, path));\n    }\n\n    return state;\n  }, [setUsedStateRef, stateRef]);\n  var setError = useCallback(function (name, error) {\n    error = isFunction(error) ? error(get(stateRef.current.errors, name)) : error;\n\n    if (error) {\n      setStateRef(\"errors.\" + name, error);\n    } else {\n      handleUnset(\"errors\", \"errors.\" + name, stateRef.current.errors, name);\n    }\n  }, [handleUnset, setStateRef, stateRef]);\n  var clearErrors = useCallback(function (name) {\n    if (!name) {\n      setStateRef(\"errors\", {});\n    } else if (Array.isArray(name)) {\n      name.forEach(function (n) {\n        return handleUnset(\"errors\", \"errors.\" + n, stateRef.current.errors, n);\n      });\n    } else {\n      handleUnset(\"errors\", \"errors.\" + name, stateRef.current.errors, name);\n    }\n  }, [handleUnset, setStateRef, stateRef]);\n  var runBuiltInValidation = useCallback(function (name) {\n    if (builtInValidationMode === false || !fieldsRef.current[name]) return undefined;\n    var field = fieldsRef.current[name].field;\n    if (builtInValidationMode === \"message\") return field.validationMessage;\n\n    for (var k in field.validity) {\n      // @ts-expect-error\n      if (k !== \"valid\" && field.validity[k]) return k;\n    }\n\n    return undefined;\n  }, [builtInValidationMode]);\n  var runAllBuiltInValidation = useCallback(function () {\n    if (builtInValidationMode === false) return {};\n    return Object.keys(fieldsRef.current).reduce(function (errors, name) {\n      var error = runBuiltInValidation(name);\n      errors = _extends({}, errors, error ? set({}, name, error) : {});\n      return errors;\n    }, {});\n  }, [builtInValidationMode, runBuiltInValidation]);\n  var runFieldValidation = useCallback(async function (name) {\n    if (!fieldValidatorsRef.current[name]) return undefined;\n\n    try {\n      var error = await fieldValidatorsRef.current[name](get(stateRef.current.values, name), stateRef.current.values);\n      return error;\n    } catch (exception) {\n      warn(\"\\uD83D\\uDCA1 react-cool-form > validate \" + name + \": \", exception);\n      throw exception;\n    }\n  }, [stateRef]);\n  var runAllFieldsValidation = useCallback(function () {\n    var promises = Object.keys(fieldValidatorsRef.current).map(function (name) {\n      return runFieldValidation(name);\n    });\n    return Promise.all(promises).then(function (errors) {\n      return Object.keys(fieldValidatorsRef.current).reduce(function (acc, cur, idx) {\n        acc = _extends({}, acc, errors[idx] ? set({}, cur, errors[idx]) : {});\n        return acc;\n      }, {});\n    });\n  }, [runFieldValidation]);\n  var runFormValidation = useCallback(async function (name) {\n    if (!formValidatorRef.current) return name ? undefined : {};\n\n    try {\n      var errors = await formValidatorRef.current(stateRef.current.values);\n      if (name) return get(errors, name);\n      return isPlainObject(errors) ? errors : {};\n    } catch (exception) {\n      warn(\"\\uD83D\\uDCA1 react-cool-form > validate form: \", exception);\n      throw exception;\n    }\n  }, [formValidatorRef, stateRef]);\n  var validateField = useCallback(async function (name) {\n    var hasAsyncValidator = isAsyncFunction(formValidatorRef.current) || isAsyncFunction(fieldValidatorsRef.current[name]);\n    if (hasAsyncValidator) setStateRef(\"isValidating\", true);\n\n    try {\n      var error = (await runFormValidation(name)) || (await runFieldValidation(name)) || runBuiltInValidation(name);\n      setError(name, error);\n      if (hasAsyncValidator) setStateRef(\"isValidating\", false);\n      return error;\n    } catch (exception) {\n      return exception;\n    }\n  }, [formValidatorRef, runBuiltInValidation, runFieldValidation, runFormValidation, setError, setStateRef]);\n  var validateFieldWithLowPriority = useCallback(function (name) {\n    return runWithLowPriority(function () {\n      return validateField(name);\n    });\n  }, [validateField]);\n  var validateForm = useCallback(function () {\n    setStateRef(\"isValidating\", true);\n    return Promise.all([runAllBuiltInValidation(), runAllFieldsValidation(), runFormValidation()]).then(function (errors) {\n      var errs = deepMerge.apply(void 0, errors);\n      setStateRef(\"errors\", errs);\n      setStateRef(\"isValidating\", false);\n      return errs;\n    });\n  }, [runAllBuiltInValidation, runAllFieldsValidation, runFormValidation, setStateRef]);\n  var runValidation = useCallback(function (name) {\n    if (!name) return validateForm().then(function (errors) {\n      return isEmptyObject(errors);\n    });\n    if (Array.isArray(name)) return Promise.all(name.map(function (n) {\n      return validateField(n);\n    })).then(function (errors) {\n      return !compact(errors).length;\n    });\n    return validateField(name).then(function (error) {\n      return !error;\n    });\n  }, [validateField, validateForm]);\n  var setTouched = useCallback(function (name, isTouched, shouldValidate) {\n    if (isTouched === void 0) {\n      isTouched = true;\n    }\n\n    if (shouldValidate === void 0) {\n      shouldValidate = validateOnBlur;\n    }\n\n    if (isTouched) {\n      setStateRef(\"touched.\" + name, true);\n    } else {\n      handleUnset(\"touched\", \"touched.\" + name, stateRef.current.touched, name);\n    }\n\n    if (shouldValidate) validateFieldWithLowPriority(name);\n  }, [handleUnset, setStateRef, stateRef, validateFieldWithLowPriority, validateOnBlur]);\n  var setTouchedMaybeValidate = useCallback(function (name) {\n    return setTouched(name, true, validateOnChange ? name !== changedFieldRef.current : undefined);\n  }, [setTouched, validateOnChange]);\n  var setDirty = useCallback(function (name, isDirty) {\n    if (isDirty === void 0) {\n      isDirty = true;\n    }\n\n    if (isDirty) {\n      setStateRef(\"dirty.\" + name, true);\n    } else {\n      handleUnset(\"dirty\", \"dirty.\" + name, stateRef.current.dirty, name);\n    }\n  }, [handleUnset, setStateRef, stateRef]);\n  var setDirtyIfNeeded = useCallback(function (name) {\n    return setDirty(name, get(stateRef.current.values, name) !== get(initialStateRef.current.values, name));\n  }, [setDirty, stateRef]);\n  var setValue = useCallback(function (name, value, _temp3) {\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        _ref3$shouldValidate = _ref3.shouldValidate,\n        shouldValidate = _ref3$shouldValidate === void 0 ? validateOnChange : _ref3$shouldValidate,\n        _ref3$shouldTouched = _ref3.shouldTouched,\n        shouldTouched = _ref3$shouldTouched === void 0 ? true : _ref3$shouldTouched,\n        _ref3$shouldDirty = _ref3.shouldDirty,\n        shouldDirty = _ref3$shouldDirty === void 0 ? true : _ref3$shouldDirty;\n\n    value = isFunction(value) ? value(get(stateRef.current.values, name)) : value;\n\n    if (!isUndefined(value)) {\n      setStateRef(\"values.\" + name, value);\n    } else {\n      handleUnset(\"values\", \"values.\" + name, stateRef.current.values, name);\n    }\n\n    setNodeValue(name, value);\n    if (shouldTouched) setTouched(name, true, false);\n    if (shouldDirty) setDirtyIfNeeded(name);\n    if (shouldValidate) validateFieldWithLowPriority(name);\n  }, [handleUnset, setDirtyIfNeeded, setNodeValue, setStateRef, setTouched, stateRef, validateFieldWithLowPriority, validateOnChange]);\n  var getOptions = useCallback(function () {\n    return {\n      formState: stateRef.current,\n      setValue: setValue,\n      setTouched: setTouched,\n      setDirty: setDirty,\n      setError: setError,\n      clearErrors: clearErrors,\n      runValidation: runValidation,\n      reset: reset,\n      submit: submit\n    };\n  }, [clearErrors, // @ts-expect-error\n  reset, runValidation, setDirty, setError, setTouched, setValue, stateRef, // @ts-expect-error\n  submit]);\n  var reset = useCallback(function (values, exclude, e) {\n    e == null ? void 0 : e.preventDefault();\n    e == null ? void 0 : e.stopPropagation();\n\n    var state = _extends({}, stateRef.current);\n\n    var skip = arrayToMap(exclude || []);\n    Object.keys(state).forEach(function (key) {\n      if (skip[key]) return;\n\n      if (key === \"values\") {\n        var nextValues = (isFunction(values) ? values(stateRef.current.values) : values) || initialStateRef.current.values;\n        state[key] = nextValues;\n        initialStateRef.current.values = nextValues;\n        setNodesOrStateValue(initialStateRef.current.values, !!values);\n      } else {\n        // @ts-expect-error\n        state[key] = initialStateRef.current[key];\n      }\n    });\n    setStateRef(\"\", state);\n    onResetRef.current(state.values, getOptions(), e);\n  }, [getOptions, onResetRef, setNodesOrStateValue, setStateRef, stateRef]);\n  var submit = useCallback(async function (e) {\n    e == null ? void 0 : e.preventDefault();\n    e == null ? void 0 : e.stopPropagation();\n    var nextTouched = Object.keys(_extends({}, fieldsRef.current, controllersRef.current)).reduce(function (touched, name) {\n      touched = set(touched, name, true, true);\n      return touched;\n    }, stateRef.current.touched);\n    setStateRef(\"touched\", nextTouched);\n    setStateRef(\"isSubmitting\", true);\n\n    try {\n      var errors = await validateForm();\n\n      if (!isEmptyObject(errors)) {\n        onErrorRef.current(errors, getOptions(), e);\n        return {\n          errors: errors\n        };\n      }\n\n      await onSubmitRef.current(stateRef.current.values, getOptions(), e);\n      setStateRef(\"isSubmitted\", true);\n      return {\n        values: stateRef.current.values\n      };\n    } catch (exception) {\n      warn(\"\\uD83D\\uDCA1 react-cool-form > submit: \", exception);\n      throw exception;\n    } finally {\n      setStateRef(\"isSubmitting\", false);\n    }\n  }, [getOptions, onErrorRef, onSubmitRef, setStateRef, stateRef, validateForm]);\n  var handleChangeEvent = useCallback(function (name, value) {\n    setStateRef(\"values.\" + name, value);\n    setDirtyIfNeeded(name);\n    if (validateOnChange) validateFieldWithLowPriority(name);\n  }, [setDirtyIfNeeded, setStateRef, validateFieldWithLowPriority, validateOnChange]);\n  var controller = useCallback(function (name, _temp4) {\n    var _ref5;\n\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n        validator = _ref4.validate,\n        value = _ref4.value,\n        defaultValue = _ref4.defaultValue,\n        parse = _ref4.parse,\n        format = _ref4.format,\n        _onChange = _ref4.onChange,\n        _onBlur = _ref4.onBlur;\n\n    if (!name) {\n      warn('💡 react-cool-form > controller: Missing the \"name\" parameter.');\n      return undefined;\n    }\n\n    controllersRef.current[name] = true;\n    if (validator) fieldValidatorsRef.current[name] = validator;\n    var val = get(defaultValuesRef.current, name);\n    defaultValue = !isUndefined(val) ? val : defaultValue;\n    if (!isUndefined(defaultValue)) setDefaultValue(name, defaultValue);\n    value = !isUndefined(value) ? value : getState(\"values.\" + name);\n    value = (_ref5 = format ? format(value) : value) != null ? _ref5 : \"\";\n    return {\n      name: name,\n      value: value,\n      onChange: function onChange() {\n        var v;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (parse) {\n          v = parse.apply(void 0, args);\n        } else {\n          var e = args[0];\n          v = (e == null ? void 0 : e.nativeEvent) instanceof Event && isFieldElement(e.target) ? getNodeValue(name) : e;\n        }\n\n        handleChangeEvent(name, v);\n        if (_onChange) _onChange.apply(void 0, args.concat([v]));\n        changedFieldRef.current = name;\n      },\n      onBlur: function onBlur(e) {\n        setTouchedMaybeValidate(name);\n        if (_onBlur) _onBlur(e);\n        changedFieldRef.current = undefined;\n      }\n    };\n  }, [getNodeValue, getState, handleChangeEvent, setDefaultValue, setTouchedMaybeValidate]);\n  useIsoLayoutEffect(function () {\n    if (!formRef.current) return;\n    fieldsRef.current = getFields(formRef.current);\n    setNodesOrStateValue(initialStateRef.current.values, true);\n    isInitRef.current = false;\n  }, [getFields, setNodesOrStateValue]);\n  useEffect(function () {\n    if (!formRef.current) return function () {\n      return null;\n    };\n\n    var handleChange = function handleChange(_ref6) {\n      var target = _ref6.target;\n      var _ref7 = target,\n          name = _ref7.name;\n\n      if (!name) {\n        warn('💡 react-cool-form > field: Missing the \"name\" attribute.');\n        return;\n      }\n\n      if (fieldsRef.current[name] && !controllersRef.current[name]) {\n        var _fieldArgsRef$current3;\n\n        var parse = (_fieldArgsRef$current3 = fieldArgsRef.current[name]) == null ? void 0 : _fieldArgsRef$current3.parse;\n        var value = getNodeValue(name);\n        handleChangeEvent(name, parse ? parse(value) : value);\n        changedFieldRef.current = name;\n      }\n    };\n\n    var handleBlur = function handleBlur(_ref8) {\n      var target = _ref8.target;\n      if (!isFieldElement(target)) return;\n      var _ref9 = target,\n          name = _ref9.name;\n\n      if (fieldsRef.current[name] && !controllersRef.current[name]) {\n        setTouchedMaybeValidate(name);\n        changedFieldRef.current = undefined;\n      }\n    };\n\n    var handleSubmit = function handleSubmit(e) {\n      return submit(e);\n    };\n\n    var handleReset = function handleReset(e) {\n      return reset(null, null, e);\n    };\n\n    var form = formRef.current;\n    form.addEventListener(\"input\", handleChange);\n    form.addEventListener(\"focusout\", handleBlur);\n    form.addEventListener(\"submit\", handleSubmit);\n    form.addEventListener(\"reset\", handleReset);\n    var observer = new MutationObserver(function (_ref10) {\n      var type = _ref10[0].type;\n      if (type !== \"childList\") return;\n      var fields = getFields(form);\n      var values = stateRef.current.values;\n      if (shouldRemoveField) Object.keys(fieldsRef.current).forEach(function (name) {\n        if (fields[name]) return;\n        handleUnset(\"values\", \"values.\" + name, stateRef.current.values, name);\n        handleUnset(\"touched\", \"touched.\" + name, stateRef.current.touched, name);\n        handleUnset(\"dirty\", \"dirty.\" + name, stateRef.current.dirty, name);\n        handleUnset(\"errors\", \"errors.\" + name, stateRef.current.errors, name);\n        setUsedStateRef(name, true);\n        initialStateRef.current.values = unset(initialStateRef.current.values, name, true);\n        delete fieldArgsRef.current[name];\n        delete fieldValidatorsRef.current[name];\n        delete controllersRef.current[name];\n      });\n      var addedNodes = [];\n      Object.keys(fields).forEach(function (name) {\n        if (fieldsRef.current[name] || controllersRef.current[name]) return;\n        var defaultValue = get(defaultValuesRef.current, name);\n        if (!isUndefined(defaultValue)) values = set(values, name, defaultValue, true);\n        addedNodes.push(name);\n      });\n      fieldsRef.current = fields;\n      if (addedNodes.length) setNodesOrStateValue(values, true, addedNodes);\n    });\n    observer.observe(form, {\n      childList: true,\n      subtree: true\n    });\n    return function () {\n      form.removeEventListener(\"input\", handleChange);\n      form.removeEventListener(\"focusout\", handleBlur);\n      form.removeEventListener(\"submit\", handleSubmit);\n      form.removeEventListener(\"reset\", handleReset);\n      observer.disconnect();\n    };\n  }, [getFields, getNodeValue, handleChangeEvent, handleUnset, reset, setNodesOrStateValue, setTouchedMaybeValidate, setUsedStateRef, shouldRemoveField, stateRef, submit]);\n  return {\n    form: formRef,\n    field: fieldRef,\n    getState: getState,\n    setValue: setValue,\n    setTouched: setTouched,\n    setDirty: setDirty,\n    setError: setError,\n    clearErrors: clearErrors,\n    runValidation: runValidation,\n    reset: reset,\n    submit: submit,\n    controller: controller\n  };\n};\n\nexport { get, set, unset, useForm };","map":{"version":3,"sources":["../src/hooks/useLatest.ts","../src/utils/arrayToMap.ts","../src/utils/isObject.ts","../src/utils/isFileList.ts","../src/utils/cloneObject.ts","../src/utils/compact.ts","../src/utils/isPlainObject.ts","../src/utils/deepMerge.ts","../src/utils/isUndefined.ts","../src/utils/filterErrors.ts","../src/utils/stringToPath.ts","../src/utils/get.ts","../src/utils/getIsDirty.ts","../src/utils/isFunction.ts","../src/utils/isAsyncFunction.ts","../src/utils/isCheckboxInput.ts","../src/utils/isEmptyObject.ts","../src/utils/isFieldElement.ts","../src/utils/isFileInput.ts","../src/utils/isInputElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isNumberInput.ts","../src/utils/isRadioInput.ts","../src/utils/isRangeInput.ts","../src/utils/runWithLowPriority.ts","../src/utils/set.ts","../src/utils/unset.ts","../src/utils/warn.ts","../src/hooks/useState.ts","../src/hooks/useIsoLayoutEffect.ts","../src/useForm.ts"],"names":["ref","useRef","useEffect","obj","value","cloneObject","object","isObject","isFileList","Array","arr","deepMerge","objects","Object","prevValue","prev","currValue","isPlainObject","filterErrors","touched","nextErrors","error","isUndefined","str","compact","getIsDirty","search","found","val","isFunction","field","element","window","start","Date","setTimeout","cb","didTimeout","timeRemaining","Math","timeout","immutable","segs","stringToPath","newObject","nextIsNumber","Number","idx","refObject","last","target","__DEV__","forceUpdate","useReducer","c","stateRef","usedStateRef","onChangeRef","useLatest","onChange","setStateRef","useCallback","fieldPath","shouldUpdate","key","path","dequal","get","state","set","errors","dirty","prevIsDirty","prevIsValid","prevSubmitCount","isDirty","isValid","isEmptyObject","submitCount","k","setUsedStateRef","unset","useIsoLayoutEffect","defaultValues","validate","validateOnChange","validateOnBlur","builtInValidationMode","shouldRemoveField","excludeFields","onReset","onSubmit","onError","debug","isInitRef","formRef","fieldsRef","fieldArgsRef","controllersRef","excludeFieldsRef","arrayToMap","changedFieldRef","formValidatorRef","fieldValidatorsRef","onResetRef","onSubmitRef","onErrorRef","defaultValuesRef","initialStateRef","values","isValidating","isSubmitting","isSubmitted","useState","getFields","form","type","name","rcfExclude","warn","acc","cur","isCheckboxInput","isRadioInput","handleUnset","fieldRef","validator","parsers","validateOrOptions","getNodeValue","options","isInputElement","isNumberInput","isRangeInput","checkboxes","checkbox","checkValues","radio","isMultipleSelect","option","isFileInput","setNodeValue","setDefaultValue","current","setNodesOrStateValue","checkDefaultValues","fields","defaultValue","getState","watch","errorWithTouched","getPath","p","errorsEnhancer","paths","s","setError","clearErrors","runBuiltInValidation","runAllBuiltInValidation","runFieldValidation","runAllFieldsValidation","promises","runFormValidation","validateField","hasAsyncValidator","isAsyncFunction","validateFieldWithLowPriority","runWithLowPriority","validateForm","errs","runValidation","setTouched","isTouched","shouldValidate","setTouchedMaybeValidate","setDirty","setDirtyIfNeeded","setValue","shouldTouched","shouldDirty","getOptions","formState","reset","submit","e","skip","exclude","nextValues","nextTouched","handleChangeEvent","controller","parse","format","onBlur","args","v","isFieldElement","handleChange","handleBlur","handleSubmit","handleReset","observer","addedNodes","childList","subtree"],"mappings":"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","sourcesContent":["import { MutableRefObject, useRef, useEffect } from \"react\";\n\nexport default <T>(val: T): MutableRefObject<T> => {\n  const ref = useRef(val);\n\n  useEffect(() => {\n    ref.current = val;\n  });\n\n  return ref;\n};\n","import { Map } from \"../types\";\n\nexport default (arr: any[]): Map =>\n  arr.reduce((obj, key) => {\n    obj[key] = true;\n    return obj;\n  }, {});\n","export default (value: unknown): value is Object =>\n  value !== null && typeof value === \"object\";\n","export default (value: unknown): value is FileList => value instanceof FileList;\n","import isObject from \"./isObject\";\nimport isFileList from \"./isFileList\";\n\nconst cloneObject = (object: unknown): any => {\n  if (object instanceof Event) throw new Error(\"Unable to clone event.\");\n\n  if (!isObject(object) || isFileList(object)) return object;\n\n  if (object instanceof Date) return new Date(object.getTime());\n\n  if (Array.isArray(object)) return object.map((val) => cloneObject(val));\n\n  if (isObject(object))\n    return Object.keys(object).reduce((obj: Record<string, any>, key) => {\n      obj[key] = cloneObject((object as Record<string, any>)[key]);\n      return obj;\n    }, {});\n\n  throw new Error(\"Unable to clone object.\");\n};\n\nexport default cloneObject;\n","export default (arr: any[]): any[] => arr.filter(Boolean);\n","import isObject from \"./isObject\";\n\nexport default (value: unknown): value is Object =>\n  !Array.isArray(value) && !(value instanceof Date) && isObject(value);\n","import isPlainObject from \"./isPlainObject\";\n\nconst deepMerge = (...objects: any[]): any =>\n  objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const prevValue = prev[key];\n      const currValue = obj[key];\n\n      if (Array.isArray(prevValue) && Array.isArray(currValue)) {\n        prev[key] = [...prevValue, ...currValue];\n      } else if (isPlainObject(prevValue) && isPlainObject(currValue)) {\n        prev[key] = deepMerge(prevValue, currValue);\n      } else {\n        prev[key] = currValue;\n      }\n    });\n\n    return prev;\n  }, {});\n\nexport default deepMerge;\n","export default (value: unknown): value is undefined => value === undefined;\n","import isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\n\nconst filterErrors = (error: unknown, touched: unknown): any => {\n  if (!isPlainObject(error)) return touched ? error : undefined;\n\n  return Object.keys(error).reduce((obj: Record<string, any>, key) => {\n    const nextErrors = filterErrors(\n      (error as Record<string, any>)[key],\n      (touched as Record<string, any>)[key] || false\n    );\n\n    if (!isUndefined(nextErrors)) {\n      obj[key] = nextErrors;\n    } else {\n      delete obj[key];\n    }\n\n    return obj;\n  }, {});\n};\n\nexport default filterErrors;\n","import compact from \"./compact\";\n\nexport default (str: string): string[] => {\n  if (typeof str !== \"string\") throw new TypeError(\"Expected a string.\");\n  if (!str.length) return [];\n\n  return compact(str.split(/[.[\\]]+/));\n};\n","import isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\nimport stringToPath from \"./stringToPath\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport default (object: any, path: string, defaultValue?: unknown): any => {\n  if (!isPlainObject(object) || !path) return defaultValue;\n\n  const value = stringToPath(path).reduce(\n    (obj, key) => (obj || {})[key],\n    object\n  );\n\n  return isUndefined(value) ? defaultValue : value;\n};\n","import isPlainObject from \"./isPlainObject\";\n\nconst getIsDirty = (dirty: object): boolean => {\n  const search = (dty: object, found: any[] = []) => {\n    for (const val of Object.values(dty)) {\n      if (val === true) {\n        found.push(val);\n        return found;\n      }\n\n      if (isPlainObject(val)) search(val, found);\n    }\n\n    return found;\n  };\n\n  return !!search(dirty).length;\n};\n\nexport default getIsDirty;\n","export default (value: unknown): value is Function =>\n  typeof value === \"function\";\n","import isFunction from \"./isFunction\";\n\nexport default (value: unknown): value is Promise<any> =>\n  isFunction(value) && value.constructor.name === \"AsyncFunction\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"checkbox\";\n","import isPlainObject from \"./isPlainObject\";\n\nexport default (value: unknown): value is Record<string, never> =>\n  isPlainObject(value) && !Object.keys(value).length;\n","import { FieldElement } from \"../types\";\n\nexport default (element: HTMLElement): element is FieldElement =>\n  /INPUT|TEXTAREA|SELECT/.test(element.tagName);\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"file\";\n","export default (element: HTMLElement): element is HTMLInputElement =>\n  element.tagName === \"INPUT\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLSelectElement =>\n  field.type === \"select-multiple\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"number\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"radio\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"range\";\n","export default (callback: (args: any) => any): any =>\n  (\n    window.requestIdleCallback ||\n    ((cb) => {\n      const start = Date.now();\n      return setTimeout(\n        () =>\n          cb({\n            didTimeout: false,\n            timeRemaining: () => Math.max(0, 50 - (Date.now() - start)),\n          }),\n        1\n      );\n    })\n  )(callback, { timeout: 2000 });\n","import cloneObject from \"./cloneObject\";\nimport isPlainObject from \"./isPlainObject\";\nimport stringToPath from \"./stringToPath\";\n\nexport default (\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  object: any,\n  path: string,\n  value: unknown,\n  immutable = false\n): any => {\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n\n  const segs = stringToPath(path);\n  const newObject = immutable ? cloneObject(object) : object;\n\n  segs.slice(0, -1).reduce((obj, key, idx) => {\n    const nextIsNumber = !Number.isNaN(Number(segs[idx + 1]));\n    if (isPlainObject(obj[key]) && !nextIsNumber) return obj[key];\n    obj[key] = nextIsNumber ? [] : {};\n    return obj[key];\n  }, newObject)[segs[segs.length - 1] || \"\"] = value;\n\n  return newObject;\n};\n","/* eslint-disable no-prototype-builtins */\n\nimport cloneObject from \"./cloneObject\";\nimport isPlainObject from \"./isPlainObject\";\nimport isObject from \"./isObject\";\nimport stringToPath from \"./stringToPath\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport default (object: any, path: string, immutable = false): any => {\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n\n  const refObject = immutable ? cloneObject(object) : object;\n  const newObject = refObject;\n\n  if (newObject.hasOwnProperty(path)) {\n    delete newObject[path];\n    return refObject;\n  }\n\n  const segs = stringToPath(path);\n\n  if (!segs.length) return refObject;\n\n  const last = segs.pop() as string;\n  const target = segs.reduce((obj, key) => (obj || {})[key], newObject);\n\n  if (isObject(target) && target.hasOwnProperty(last)) delete target[last];\n\n  return refObject;\n};\n","export default (...args: any[]): void => {\n  if (__DEV__) console.warn(...args);\n};\n","import { useReducer, useRef, useCallback } from \"react\";\nimport { dequal } from \"dequal/lite\";\n\nimport {\n  Debug,\n  FormState,\n  FormStateReturn,\n  Map,\n  SetStateRef,\n  SetUsedStateRef,\n} from \"../types\";\nimport useLatest from \"./useLatest\";\nimport { get, getIsDirty, isEmptyObject, set } from \"../utils\";\n\nexport default <V>(\n  initialState: FormState<V>,\n  onChange?: Debug<V>\n): FormStateReturn<V> => {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\n  const stateRef = useRef(initialState);\n  const usedStateRef = useRef<Map>({});\n  const onChangeRef = useLatest(onChange || (() => undefined));\n\n  const setStateRef = useCallback<SetStateRef>(\n    (path, value, { fieldPath, shouldUpdate = true } = {}) => {\n      const key = path.split(\".\")[0];\n\n      if (!key) {\n        if (!dequal(stateRef.current, value)) {\n          stateRef.current = value;\n          forceUpdate();\n          onChangeRef.current(stateRef.current);\n        }\n\n        return;\n      }\n\n      if (\n        (path !== \"values\" && key === \"values\") ||\n        !dequal(get(stateRef.current, path), value)\n      ) {\n        const state = set(stateRef.current, path, value, true);\n        const {\n          errors,\n          dirty,\n          isDirty: prevIsDirty,\n          isValid: prevIsValid,\n        } = state;\n        let { submitCount: prevSubmitCount } = state;\n        const isDirty = key === \"dirty\" ? getIsDirty(dirty) : prevIsDirty;\n        const isValid = key === \"errors\" ? isEmptyObject(errors) : prevIsValid;\n        const submitCount =\n          key === \"isSubmitting\" && value\n            ? (prevSubmitCount += 1)\n            : prevSubmitCount;\n\n        stateRef.current = { ...state, isDirty, isValid, submitCount };\n\n        path = fieldPath || path;\n\n        if (\n          shouldUpdate &&\n          (Object.keys(usedStateRef.current).some(\n            (k) => path.startsWith(k) || k.startsWith(path)\n          ) ||\n            (usedStateRef.current.isDirty && isDirty !== prevIsDirty) ||\n            (usedStateRef.current.isValid && isValid !== prevIsValid))\n        ) {\n          forceUpdate();\n          onChangeRef.current(stateRef.current);\n        }\n      }\n    },\n    [onChangeRef]\n  );\n\n  const setUsedStateRef = useCallback<SetUsedStateRef>(\n    (path, unset = false) => {\n      if (unset) {\n        delete usedStateRef.current[path];\n      } else {\n        usedStateRef.current[path] = true;\n      }\n    },\n    []\n  );\n\n  return { stateRef, setStateRef, setUsedStateRef };\n};\n","import { useEffect, useLayoutEffect } from \"react\";\n\nconst useIsoLayoutEffect =\n  typeof window === \"undefined\" ? useEffect : useLayoutEffect;\n\nexport default useIsoLayoutEffect;\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { useCallback, useEffect, useRef } from \"react\";\n\nimport {\n  ClearErrors,\n  Config,\n  Controller,\n  FieldArgs,\n  FieldElement,\n  FieldRef,\n  Fields,\n  FieldValidator,\n  FieldsValue,\n  FormErrors,\n  FormState,\n  FormValues,\n  GetState,\n  Map,\n  Reset,\n  Return,\n  RunValidation,\n  SetDirty,\n  SetError,\n  SetTouched,\n  SetValue,\n  Submit,\n} from \"./types\";\nimport { useIsoLayoutEffect, useLatest, useState } from \"./hooks\";\nimport {\n  arrayToMap,\n  compact,\n  deepMerge,\n  filterErrors,\n  get,\n  isAsyncFunction,\n  isCheckboxInput,\n  isEmptyObject,\n  isFieldElement,\n  isFileInput,\n  isFileList,\n  isFunction,\n  isInputElement,\n  isMultipleSelect,\n  isNumberInput,\n  isPlainObject,\n  isRadioInput,\n  isRangeInput,\n  isUndefined,\n  runWithLowPriority,\n  set,\n  unset,\n  warn,\n} from \"./utils\";\n\nexport default <V extends FormValues = FormValues>({\n  defaultValues = {} as V,\n  validate,\n  validateOnChange = true,\n  validateOnBlur = true,\n  builtInValidationMode = \"message\",\n  shouldRemoveField = true,\n  excludeFields = [],\n  onReset,\n  onSubmit,\n  onError,\n  debug,\n}: Config<V> = {}): Return<V> => {\n  const isInitRef = useRef(true);\n  const formRef = useRef<HTMLFormElement>(null);\n  const fieldsRef = useRef<Fields>({});\n  const fieldArgsRef = useRef<FieldArgs>({});\n  const controllersRef = useRef<Map>({});\n  const excludeFieldsRef = useRef<Map>(arrayToMap(excludeFields));\n  const changedFieldRef = useRef<string>();\n  const formValidatorRef = useLatest(validate);\n  const fieldValidatorsRef = useRef<Record<string, FieldValidator<V>>>({});\n  const onResetRef = useLatest(onReset || (() => undefined));\n  const onSubmitRef = useLatest(onSubmit || (() => undefined));\n  const onErrorRef = useLatest(onError || (() => undefined));\n  const defaultValuesRef = useRef(defaultValues);\n  const initialStateRef = useRef<FormState<V>>({\n    values: defaultValuesRef.current,\n    touched: {},\n    errors: {},\n    isDirty: false,\n    dirty: {},\n    isValidating: false,\n    isValid: true,\n    isSubmitting: false,\n    isSubmitted: false,\n    submitCount: 0,\n  });\n  const { stateRef, setStateRef, setUsedStateRef } = useState<V>(\n    initialStateRef.current,\n    debug\n  );\n\n  const getFields = useCallback(\n    (form: HTMLFormElement) =>\n      Array.from(form.querySelectorAll(\"input,textarea,select\"))\n        .filter((element) => {\n          const field = element as FieldElement;\n          const {\n            type,\n            name,\n            dataset: { rcfExclude },\n          } = field;\n\n          if (/button|image|submit|reset/.test(type)) return false;\n          if (rcfExclude && !name) {\n            warn('💡 react-cool-form > field: Missing the \"name\" attribute.');\n            return false;\n          }\n\n          return (\n            controllersRef.current[name] ||\n            !(rcfExclude || excludeFieldsRef.current[name])\n          );\n        })\n        .reduce((acc: Record<string, any>, cur) => {\n          const field = cur as FieldElement;\n          const { name } = field;\n\n          acc[name] = { ...acc[name], field: cur };\n\n          if (isCheckboxInput(field) || isRadioInput(field))\n            acc[name].options = acc[name].options\n              ? [...acc[name].options, cur]\n              : [cur];\n\n          return acc;\n        }, {}),\n    []\n  );\n\n  const handleUnset = useCallback(\n    (path: string, fieldPath: string, target: any, name: string) =>\n      setStateRef(path, unset(target, name, true), { fieldPath }),\n    [setStateRef]\n  );\n\n  const fieldRef = useCallback<FieldRef<V>>(\n    (validateOrOptions) => (field) => {\n      if (\n        !field?.name ||\n        controllersRef.current[field.name] ||\n        excludeFieldsRef.current[field.name]\n      )\n        return;\n\n      if (isFunction(validateOrOptions)) {\n        fieldValidatorsRef.current[field.name] = validateOrOptions;\n        return;\n      }\n\n      const { validate: validator, ...parsers } = validateOrOptions;\n\n      if (validator) fieldValidatorsRef.current[field.name] = validator;\n      fieldArgsRef.current[field.name] = parsers;\n    },\n    []\n  );\n\n  const getNodeValue = useCallback(\n    (name: string) => {\n      const { field, options } = fieldsRef.current[name];\n      let value = field.value as any;\n\n      if (isInputElement(field)) {\n        if (fieldArgsRef.current[name]?.valueAsNumber) {\n          value = field.valueAsNumber;\n          return value;\n        }\n        if (fieldArgsRef.current[name]?.valueAsDate) {\n          value = field.valueAsDate;\n          return value;\n        }\n      }\n\n      if (isNumberInput(field) || isRangeInput(field))\n        value = field.valueAsNumber || \"\";\n\n      if (isCheckboxInput(field)) {\n        if (options) {\n          const checkboxes = options as HTMLInputElement[];\n\n          if (options.length > 1) {\n            value = checkboxes\n              .filter((checkbox) => checkbox.checked)\n              .map((checkbox) => checkbox.value);\n          } else {\n            value = checkboxes[0].checked;\n          }\n        } else {\n          let checkValues = get(stateRef.current.values, field.name);\n\n          if (Array.isArray(checkValues)) {\n            checkValues = new Set(checkValues);\n\n            if (field.checked) {\n              checkValues.add(value);\n            } else {\n              checkValues.delete(value);\n            }\n\n            value = Array.from(checkValues);\n          } else {\n            value = field.checked;\n          }\n        }\n      }\n\n      if (isRadioInput(field) && options)\n        value =\n          (options as HTMLInputElement[]).find((radio) => radio.checked)\n            ?.value || \"\";\n\n      if (isMultipleSelect(field) && !options)\n        value = Array.from(field.options)\n          .filter((option) => option.selected)\n          .map((option) => option.value);\n\n      if (isFileInput(field)) value = field.files;\n\n      return value;\n    },\n    [stateRef]\n  );\n\n  const setNodeValue = useCallback((name: string, value: any) => {\n    if (!fieldsRef.current[name] || controllersRef.current[name]) return;\n\n    const { field, options } = fieldsRef.current[name];\n\n    if (isCheckboxInput(field)) {\n      const checkboxes = options as HTMLInputElement[];\n\n      if (checkboxes.length > 1) {\n        checkboxes.forEach((checkbox) => {\n          checkbox.checked = Array.isArray(value)\n            ? value.includes(checkbox.value)\n            : !!value;\n        });\n      } else {\n        checkboxes[0].checked = !!value;\n      }\n    } else if (isRadioInput(field)) {\n      (options as HTMLInputElement[]).forEach((radio) => {\n        radio.checked = radio.value === value;\n      });\n    } else if (isMultipleSelect(field) && Array.isArray(value)) {\n      Array.from(field.options).forEach((option) => {\n        option.selected = !!value.includes(option.value);\n      });\n    } else if (isFileInput(field)) {\n      if (isFileList(value)) field.files = value;\n      if (!value) field.value = \"\";\n    } else {\n      field.value = value ?? \"\";\n    }\n  }, []);\n\n  const setDefaultValue = useCallback(\n    (name: string, value: any) => {\n      if (!isUndefined(get(initialStateRef.current.values, name))) return;\n\n      initialStateRef.current.values = set(\n        initialStateRef.current.values,\n        name,\n        value,\n        true\n      );\n\n      setStateRef(`values.${name}`, get(initialStateRef.current.values, name), {\n        shouldUpdate: !isInitRef.current,\n      });\n    },\n    [setStateRef]\n  );\n\n  const setNodesOrStateValue = useCallback(\n    (\n      values: V,\n      checkDefaultValues = false,\n      fields: FieldsValue[] | string[] = Object.values(fieldsRef.current)\n    ) =>\n      fields.forEach((field: FieldsValue | string) => {\n        const name = isPlainObject(field)\n          ? (field as FieldsValue).field.name\n          : field;\n\n        if (controllersRef.current[name]) return;\n\n        const value = get(values, name);\n\n        if (!isUndefined(value)) setNodeValue(name, value);\n\n        if (checkDefaultValues) {\n          const defaultValue = get(defaultValuesRef.current, name);\n\n          setDefaultValue(\n            name,\n            !isUndefined(defaultValue) ? defaultValue : getNodeValue(name)\n          );\n        }\n      }),\n    [getNodeValue, setDefaultValue, setNodeValue]\n  );\n\n  const getState = useCallback<GetState>(\n    (path, { target, watch = true, errorWithTouched = false } = {}) => {\n      if (!path) return undefined;\n\n      const getPath = (p: string) => {\n        if (p === \"values\" && !target && watch)\n          warn(\n            '💡 react-cool-form > getState: Get the \"values\" alone may cause unnecessary re-renders. If you know what you\\'re doing, please ignore this warning. See: https://react-cool-form.netlify.app/docs/getting-started/form-state#best-practices'\n          );\n\n        p = target ? `${target}.${p}` : p;\n\n        if (watch) setUsedStateRef(p);\n\n        return p;\n      };\n      const errorsEnhancer = (p: string, state: any) => {\n        if (\n          !watch ||\n          !errorWithTouched ||\n          !p.startsWith(\"errors\") ||\n          !state ||\n          isEmptyObject(state)\n        )\n          return state;\n\n        p = p.replace(\"errors\", \"touched\");\n        setUsedStateRef(p);\n\n        return filterErrors(state, get(stateRef.current, p));\n      };\n      let state;\n\n      if (Array.isArray(path)) {\n        state = path.map((p) => {\n          p = getPath(p);\n          return errorsEnhancer(p, get(stateRef.current, p));\n        });\n      } else if (isPlainObject(path)) {\n        const paths = path as Record<string, string>;\n        state = Object.keys(paths).reduce((s: Record<string, any>, key) => {\n          path = getPath(paths[key]);\n          s[key] = errorsEnhancer(path, get(stateRef.current, path));\n          return s;\n        }, {});\n      } else {\n        path = getPath(path);\n        state = errorsEnhancer(path, get(stateRef.current, path));\n      }\n\n      return state;\n    },\n    [setUsedStateRef, stateRef]\n  );\n\n  const setError = useCallback<SetError>(\n    (name, error) => {\n      error = isFunction(error)\n        ? error(get(stateRef.current.errors, name))\n        : error;\n\n      if (error) {\n        setStateRef(`errors.${name}`, error);\n      } else {\n        handleUnset(\"errors\", `errors.${name}`, stateRef.current.errors, name);\n      }\n    },\n    [handleUnset, setStateRef, stateRef]\n  );\n\n  const clearErrors = useCallback<ClearErrors>(\n    (name) => {\n      if (!name) {\n        setStateRef(\"errors\", {});\n      } else if (Array.isArray(name)) {\n        name.forEach((n) =>\n          handleUnset(\"errors\", `errors.${n}`, stateRef.current.errors, n)\n        );\n      } else {\n        handleUnset(\"errors\", `errors.${name}`, stateRef.current.errors, name);\n      }\n    },\n    [handleUnset, setStateRef, stateRef]\n  );\n\n  const runBuiltInValidation = useCallback(\n    (name: string) => {\n      if (builtInValidationMode === false || !fieldsRef.current[name])\n        return undefined;\n\n      const { field } = fieldsRef.current[name];\n\n      if (builtInValidationMode === \"message\") return field.validationMessage;\n\n      for (const k in field.validity) {\n        // @ts-expect-error\n        if (k !== \"valid\" && field.validity[k]) return k;\n      }\n\n      return undefined;\n    },\n    [builtInValidationMode]\n  );\n\n  const runAllBuiltInValidation = useCallback(() => {\n    if (builtInValidationMode === false) return {};\n\n    return Object.keys(fieldsRef.current).reduce((errors, name) => {\n      const error = runBuiltInValidation(name);\n      errors = { ...errors, ...(error ? set({}, name, error) : {}) };\n      return errors;\n    }, {});\n  }, [builtInValidationMode, runBuiltInValidation]);\n\n  const runFieldValidation = useCallback(\n    async (name: string): Promise<any> => {\n      if (!fieldValidatorsRef.current[name]) return undefined;\n\n      try {\n        const error = await fieldValidatorsRef.current[name](\n          get(stateRef.current.values, name),\n          stateRef.current.values\n        );\n\n        return error;\n      } catch (exception) {\n        warn(`💡 react-cool-form > validate ${name}: `, exception);\n        throw exception;\n      }\n    },\n    [stateRef]\n  );\n\n  const runAllFieldsValidation = useCallback((): Promise<FormErrors<V>> => {\n    const promises = Object.keys(fieldValidatorsRef.current).map((name) =>\n      runFieldValidation(name)\n    );\n\n    return Promise.all(promises).then((errors) =>\n      Object.keys(fieldValidatorsRef.current).reduce((acc, cur, idx) => {\n        acc = { ...acc, ...(errors[idx] ? set({}, cur, errors[idx]) : {}) };\n        return acc;\n      }, {})\n    );\n  }, [runFieldValidation]);\n\n  const runFormValidation = useCallback(\n    async (name?: string): Promise<any> => {\n      if (!formValidatorRef.current) return name ? undefined : {};\n\n      try {\n        const errors = await formValidatorRef.current(stateRef.current.values);\n\n        if (name) return get(errors, name);\n\n        return isPlainObject(errors) ? errors : {};\n      } catch (exception) {\n        warn(`💡 react-cool-form > validate form: `, exception);\n        throw exception;\n      }\n    },\n    [formValidatorRef, stateRef]\n  );\n\n  const validateField = useCallback(\n    async (name: string) => {\n      const hasAsyncValidator =\n        isAsyncFunction(formValidatorRef.current) ||\n        isAsyncFunction(fieldValidatorsRef.current[name]);\n\n      if (hasAsyncValidator) setStateRef(\"isValidating\", true);\n\n      try {\n        const error =\n          (await runFormValidation(name)) ||\n          (await runFieldValidation(name)) ||\n          runBuiltInValidation(name);\n\n        setError(name, error);\n        if (hasAsyncValidator) setStateRef(\"isValidating\", false);\n\n        return error;\n      } catch (exception) {\n        return exception;\n      }\n    },\n    [\n      formValidatorRef,\n      runBuiltInValidation,\n      runFieldValidation,\n      runFormValidation,\n      setError,\n      setStateRef,\n    ]\n  );\n\n  const validateFieldWithLowPriority = useCallback<typeof validateField>(\n    (name) => runWithLowPriority(() => validateField(name)),\n    [validateField]\n  );\n\n  const validateForm = useCallback((): Promise<FormErrors<V>> => {\n    setStateRef(\"isValidating\", true);\n\n    return Promise.all([\n      runAllBuiltInValidation(),\n      runAllFieldsValidation(),\n      runFormValidation(),\n    ]).then((errors) => {\n      const errs = deepMerge(...errors);\n\n      setStateRef(\"errors\", errs);\n      setStateRef(\"isValidating\", false);\n\n      return errs;\n    });\n  }, [\n    runAllBuiltInValidation,\n    runAllFieldsValidation,\n    runFormValidation,\n    setStateRef,\n  ]);\n\n  const runValidation = useCallback<RunValidation>(\n    (name) => {\n      if (!name) return validateForm().then((errors) => isEmptyObject(errors));\n\n      if (Array.isArray(name))\n        return Promise.all(name.map((n) => validateField(n))).then(\n          (errors) => !compact(errors).length\n        );\n\n      return validateField(name).then((error) => !error);\n    },\n    [validateField, validateForm]\n  );\n\n  const setTouched = useCallback<SetTouched>(\n    (name, isTouched = true, shouldValidate = validateOnBlur) => {\n      if (isTouched) {\n        setStateRef(`touched.${name}`, true);\n      } else {\n        handleUnset(\n          \"touched\",\n          `touched.${name}`,\n          stateRef.current.touched,\n          name\n        );\n      }\n\n      if (shouldValidate) validateFieldWithLowPriority(name);\n    },\n    [\n      handleUnset,\n      setStateRef,\n      stateRef,\n      validateFieldWithLowPriority,\n      validateOnBlur,\n    ]\n  );\n\n  const setTouchedMaybeValidate = useCallback(\n    (name: string) =>\n      setTouched(\n        name,\n        true,\n        validateOnChange ? name !== changedFieldRef.current : undefined\n      ),\n    [setTouched, validateOnChange]\n  );\n\n  const setDirty = useCallback<SetDirty>(\n    (name, isDirty = true) => {\n      if (isDirty) {\n        setStateRef(`dirty.${name}`, true);\n      } else {\n        handleUnset(\"dirty\", `dirty.${name}`, stateRef.current.dirty, name);\n      }\n    },\n    [handleUnset, setStateRef, stateRef]\n  );\n\n  const setDirtyIfNeeded = useCallback(\n    (name: string) =>\n      setDirty(\n        name,\n        get(stateRef.current.values, name) !==\n          get(initialStateRef.current.values, name)\n      ),\n    [setDirty, stateRef]\n  );\n\n  const setValue = useCallback<SetValue>(\n    (\n      name,\n      value,\n      {\n        shouldValidate = validateOnChange,\n        shouldTouched = true,\n        shouldDirty = true,\n      } = {}\n    ) => {\n      value = isFunction(value)\n        ? value(get(stateRef.current.values, name))\n        : value;\n\n      if (!isUndefined(value)) {\n        setStateRef(`values.${name}`, value);\n      } else {\n        handleUnset(\"values\", `values.${name}`, stateRef.current.values, name);\n      }\n      setNodeValue(name, value);\n\n      if (shouldTouched) setTouched(name, true, false);\n      if (shouldDirty) setDirtyIfNeeded(name);\n      if (shouldValidate) validateFieldWithLowPriority(name);\n    },\n    [\n      handleUnset,\n      setDirtyIfNeeded,\n      setNodeValue,\n      setStateRef,\n      setTouched,\n      stateRef,\n      validateFieldWithLowPriority,\n      validateOnChange,\n    ]\n  );\n\n  const getOptions = useCallback(\n    () => ({\n      formState: stateRef.current,\n      setValue,\n      setTouched,\n      setDirty,\n      setError,\n      clearErrors,\n      runValidation,\n      reset,\n      submit,\n    }),\n    [\n      clearErrors,\n      // @ts-expect-error\n      reset,\n      runValidation,\n      setDirty,\n      setError,\n      setTouched,\n      setValue,\n      stateRef,\n      // @ts-expect-error\n      submit,\n    ]\n  );\n\n  const reset: Reset<V> = useCallback(\n    (values, exclude, e) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n\n      const state = { ...stateRef.current };\n      const skip = arrayToMap(exclude || []);\n\n      Object.keys(state).forEach((key) => {\n        if (skip[key]) return;\n\n        if (key === \"values\") {\n          const nextValues =\n            (isFunction(values) ? values(stateRef.current.values) : values) ||\n            initialStateRef.current.values;\n\n          state[key] = nextValues;\n          initialStateRef.current.values = nextValues;\n          setNodesOrStateValue(initialStateRef.current.values, !!values);\n        } else {\n          // @ts-expect-error\n          state[key] = initialStateRef.current[key];\n        }\n      });\n\n      setStateRef(\"\", state);\n      onResetRef.current(state.values, getOptions(), e);\n    },\n    [getOptions, onResetRef, setNodesOrStateValue, setStateRef, stateRef]\n  );\n\n  const submit: Submit<V> = useCallback(\n    async (e) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n\n      const nextTouched = Object.keys({\n        ...fieldsRef.current,\n        ...controllersRef.current,\n      }).reduce((touched, name) => {\n        touched = set(touched, name, true, true);\n        return touched;\n      }, stateRef.current.touched);\n\n      setStateRef(\"touched\", nextTouched);\n      setStateRef(\"isSubmitting\", true);\n\n      try {\n        const errors = await validateForm();\n\n        if (!isEmptyObject(errors)) {\n          onErrorRef.current(errors, getOptions(), e);\n\n          return { errors };\n        }\n\n        await onSubmitRef.current(stateRef.current.values, getOptions(), e);\n        setStateRef(\"isSubmitted\", true);\n\n        return { values: stateRef.current.values };\n      } catch (exception) {\n        warn(`💡 react-cool-form > submit: `, exception);\n        throw exception;\n      } finally {\n        setStateRef(\"isSubmitting\", false);\n      }\n    },\n    [getOptions, onErrorRef, onSubmitRef, setStateRef, stateRef, validateForm]\n  );\n\n  const handleChangeEvent = useCallback(\n    (name: string, value: any) => {\n      setStateRef(`values.${name}`, value);\n      setDirtyIfNeeded(name);\n\n      if (validateOnChange) validateFieldWithLowPriority(name);\n    },\n    [\n      setDirtyIfNeeded,\n      setStateRef,\n      validateFieldWithLowPriority,\n      validateOnChange,\n    ]\n  );\n\n  const controller = useCallback<Controller<V>>(\n    (\n      name,\n      {\n        validate: validator,\n        value,\n        defaultValue,\n        parse,\n        format,\n        onChange,\n        onBlur,\n      } = {}\n    ) => {\n      if (!name) {\n        warn('💡 react-cool-form > controller: Missing the \"name\" parameter.');\n        return undefined;\n      }\n\n      controllersRef.current[name] = true;\n      if (validator) fieldValidatorsRef.current[name] = validator;\n\n      const val = get(defaultValuesRef.current, name);\n      defaultValue = !isUndefined(val) ? val : defaultValue;\n      if (!isUndefined(defaultValue)) setDefaultValue(name, defaultValue);\n\n      value = !isUndefined(value) ? value : getState(`values.${name}`);\n      value = (format ? format(value) : value) ?? \"\";\n\n      return {\n        name,\n        value,\n        onChange: (...args) => {\n          let v;\n\n          if (parse) {\n            v = parse(...args);\n          } else {\n            const e = args[0];\n            v =\n              e?.nativeEvent instanceof Event && isFieldElement(e.target)\n                ? getNodeValue(name)\n                : e;\n          }\n\n          handleChangeEvent(name, v);\n          if (onChange) onChange(...args, v);\n          changedFieldRef.current = name;\n        },\n        onBlur: (e) => {\n          setTouchedMaybeValidate(name);\n          if (onBlur) onBlur(e);\n          changedFieldRef.current = undefined;\n        },\n      };\n    },\n    [\n      getNodeValue,\n      getState,\n      handleChangeEvent,\n      setDefaultValue,\n      setTouchedMaybeValidate,\n    ]\n  );\n\n  useIsoLayoutEffect(() => {\n    if (!formRef.current) return;\n\n    fieldsRef.current = getFields(formRef.current);\n    setNodesOrStateValue(initialStateRef.current.values, true);\n    isInitRef.current = false;\n  }, [getFields, setNodesOrStateValue]);\n\n  useEffect(() => {\n    if (!formRef.current) return () => null;\n\n    const handleChange = ({ target }: Event) => {\n      const { name } = target as FieldElement;\n\n      if (!name) {\n        warn('💡 react-cool-form > field: Missing the \"name\" attribute.');\n        return;\n      }\n\n      if (fieldsRef.current[name] && !controllersRef.current[name]) {\n        const parse = fieldArgsRef.current[name]?.parse;\n        const value = getNodeValue(name);\n\n        handleChangeEvent(name, parse ? parse(value) : value);\n        changedFieldRef.current = name;\n      }\n    };\n\n    const handleBlur = ({ target }: Event) => {\n      if (!isFieldElement(target as HTMLElement)) return;\n\n      const { name } = target as FieldElement;\n\n      if (fieldsRef.current[name] && !controllersRef.current[name]) {\n        setTouchedMaybeValidate(name);\n        changedFieldRef.current = undefined;\n      }\n    };\n\n    const handleSubmit = (e: Event) => submit(e as any);\n\n    const handleReset = (e: Event) => reset(null, null, e as any);\n\n    const form = formRef.current;\n    form.addEventListener(\"input\", handleChange);\n    form.addEventListener(\"focusout\", handleBlur);\n    form.addEventListener(\"submit\", handleSubmit);\n    form.addEventListener(\"reset\", handleReset);\n\n    const observer = new MutationObserver(([{ type }]) => {\n      if (type !== \"childList\") return;\n\n      const fields = getFields(form);\n      let { values } = stateRef.current;\n\n      if (shouldRemoveField)\n        Object.keys(fieldsRef.current).forEach((name) => {\n          if (fields[name]) return;\n\n          handleUnset(\n            \"values\",\n            `values.${name}`,\n            stateRef.current.values,\n            name\n          );\n          handleUnset(\n            \"touched\",\n            `touched.${name}`,\n            stateRef.current.touched,\n            name\n          );\n          handleUnset(\"dirty\", `dirty.${name}`, stateRef.current.dirty, name);\n          handleUnset(\n            \"errors\",\n            `errors.${name}`,\n            stateRef.current.errors,\n            name\n          );\n          setUsedStateRef(name, true);\n\n          initialStateRef.current.values = unset(\n            initialStateRef.current.values,\n            name,\n            true\n          );\n          delete fieldArgsRef.current[name];\n          delete fieldValidatorsRef.current[name];\n          delete controllersRef.current[name];\n        });\n\n      const addedNodes: string[] = [];\n\n      Object.keys(fields).forEach((name) => {\n        if (fieldsRef.current[name] || controllersRef.current[name]) return;\n\n        const defaultValue = get(defaultValuesRef.current, name);\n\n        if (!isUndefined(defaultValue))\n          values = set(values, name, defaultValue, true);\n\n        addedNodes.push(name);\n      });\n\n      fieldsRef.current = fields;\n      if (addedNodes.length) setNodesOrStateValue(values, true, addedNodes);\n    });\n    observer.observe(form, { childList: true, subtree: true });\n\n    return () => {\n      form.removeEventListener(\"input\", handleChange);\n      form.removeEventListener(\"focusout\", handleBlur);\n      form.removeEventListener(\"submit\", handleSubmit);\n      form.removeEventListener(\"reset\", handleReset);\n      observer.disconnect();\n    };\n  }, [\n    getFields,\n    getNodeValue,\n    handleChangeEvent,\n    handleUnset,\n    reset,\n    setNodesOrStateValue,\n    setTouchedMaybeValidate,\n    setUsedStateRef,\n    shouldRemoveField,\n    stateRef,\n    submit,\n  ]);\n\n  return {\n    form: formRef,\n    field: fieldRef,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n    controller,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}