{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar messages = {\n  'default': 'Validation error on field %s',\n  required: '%s is required',\n  'enum': '%s must be one of %s',\n  whitespace: '%s cannot be empty',\n  date: {\n    format: '%s date %s is invalid for format %s',\n    parse: '%s date could not be parsed, %s is invalid ',\n    invalid: '%s date %s is invalid'\n  },\n  types: {\n    string: '%s is not a %s',\n    method: '%s is not a %s (function)',\n    array: '%s is not an %s',\n    object: '%s is not an %s',\n    number: '%s is not a %s',\n    date: '%s is not a %s',\n    boolean: '%s is not a %s',\n    integer: '%s is not an %s',\n    float: '%s is not a %s',\n    regexp: '%s is not a valid %s',\n    email: '%s is not a valid %s',\n    url: '%s is not a valid %s',\n    hex: '%s is not a valid %s'\n  },\n  string: {\n    len: '%s must be exactly %s characters',\n    min: '%s must be at least %s characters',\n    max: '%s cannot be longer than %s characters',\n    range: '%s must be between %s and %s characters'\n  },\n  number: {\n    len: '%s must equal %s',\n    min: '%s cannot be less than %s',\n    max: '%s cannot be greater than %s',\n    range: '%s must be between %s and %s'\n  },\n  array: {\n    len: '%s must be exactly %s in length',\n    min: '%s cannot be less than %s in length',\n    max: '%s cannot be greater than %s in length',\n    range: '%s must be between %s and %s in length'\n  },\n  pattern: {\n    mismatch: '%s value %s does not match pattern %s'\n  },\n  clone: function clone() {\n    var cloned = JSON.parse(JSON.stringify(this));\n    cloned.clone = this.clone;\n    return cloned;\n  }\n};\nexports['default'] = messages;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/sachin/Desktop/React/photography/node_modules/async-validator/lib/messages.js"],"names":["Object","defineProperty","exports","value","messages","required","whitespace","date","format","parse","invalid","types","string","method","array","object","number","boolean","integer","float","regexp","email","url","hex","len","min","max","range","pattern","mismatch","clone","cloned","JSON","stringify","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGA,IAAIC,QAAQ,GAAG;AACb,aAAW,8BADE;AAEbC,EAAAA,QAAQ,EAAE,gBAFG;AAGb,UAAQ,sBAHK;AAIbC,EAAAA,UAAU,EAAE,oBAJC;AAKbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,qCADJ;AAEJC,IAAAA,KAAK,EAAE,6CAFH;AAGJC,IAAAA,OAAO,EAAE;AAHL,GALO;AAUbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,gBADH;AAELC,IAAAA,MAAM,EAAE,2BAFH;AAGLC,IAAAA,KAAK,EAAE,iBAHF;AAILC,IAAAA,MAAM,EAAE,iBAJH;AAKLC,IAAAA,MAAM,EAAE,gBALH;AAMLT,IAAAA,IAAI,EAAE,gBAND;AAOLU,IAAAA,OAAO,EAAE,gBAPJ;AAQLC,IAAAA,OAAO,EAAE,iBARJ;AASLC,IAAAA,KAAK,EAAE,gBATF;AAULC,IAAAA,MAAM,EAAE,sBAVH;AAWLC,IAAAA,KAAK,EAAE,sBAXF;AAYLC,IAAAA,GAAG,EAAE,sBAZA;AAaLC,IAAAA,GAAG,EAAE;AAbA,GAVM;AAyBbX,EAAAA,MAAM,EAAE;AACNY,IAAAA,GAAG,EAAE,kCADC;AAENC,IAAAA,GAAG,EAAE,mCAFC;AAGNC,IAAAA,GAAG,EAAE,wCAHC;AAINC,IAAAA,KAAK,EAAE;AAJD,GAzBK;AA+BbX,EAAAA,MAAM,EAAE;AACNQ,IAAAA,GAAG,EAAE,kBADC;AAENC,IAAAA,GAAG,EAAE,2BAFC;AAGNC,IAAAA,GAAG,EAAE,8BAHC;AAINC,IAAAA,KAAK,EAAE;AAJD,GA/BK;AAqCbb,EAAAA,KAAK,EAAE;AACLU,IAAAA,GAAG,EAAE,iCADA;AAELC,IAAAA,GAAG,EAAE,qCAFA;AAGLC,IAAAA,GAAG,EAAE,wCAHA;AAILC,IAAAA,KAAK,EAAE;AAJF,GArCM;AA2CbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AADH,GA3CI;AA8CbC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,QAAIC,MAAM,GAAGC,IAAI,CAACvB,KAAL,CAAWuB,IAAI,CAACC,SAAL,CAAe,IAAf,CAAX,CAAb;AACAF,IAAAA,MAAM,CAACD,KAAP,GAAe,KAAKA,KAApB;AACA,WAAOC,MAAP;AACD;AAlDY,CAAf;AAoDA7B,OAAO,CAAC,SAAD,CAAP,GAAqBE,QAArB;AACA8B,MAAM,CAAChC,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar messages = {\n  'default': 'Validation error on field %s',\n  required: '%s is required',\n  'enum': '%s must be one of %s',\n  whitespace: '%s cannot be empty',\n  date: {\n    format: '%s date %s is invalid for format %s',\n    parse: '%s date could not be parsed, %s is invalid ',\n    invalid: '%s date %s is invalid'\n  },\n  types: {\n    string: '%s is not a %s',\n    method: '%s is not a %s (function)',\n    array: '%s is not an %s',\n    object: '%s is not an %s',\n    number: '%s is not a %s',\n    date: '%s is not a %s',\n    boolean: '%s is not a %s',\n    integer: '%s is not an %s',\n    float: '%s is not a %s',\n    regexp: '%s is not a valid %s',\n    email: '%s is not a valid %s',\n    url: '%s is not a valid %s',\n    hex: '%s is not a valid %s'\n  },\n  string: {\n    len: '%s must be exactly %s characters',\n    min: '%s must be at least %s characters',\n    max: '%s cannot be longer than %s characters',\n    range: '%s must be between %s and %s characters'\n  },\n  number: {\n    len: '%s must equal %s',\n    min: '%s cannot be less than %s',\n    max: '%s cannot be greater than %s',\n    range: '%s must be between %s and %s'\n  },\n  array: {\n    len: '%s must be exactly %s in length',\n    min: '%s cannot be less than %s in length',\n    max: '%s cannot be greater than %s in length',\n    range: '%s must be between %s and %s in length'\n  },\n  pattern: {\n    mismatch: '%s value %s does not match pattern %s'\n  },\n  clone: function clone() {\n    var cloned = JSON.parse(JSON.stringify(this));\n    cloned.clone = this.clone;\n    return cloned;\n  }\n};\nexports['default'] = messages;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}