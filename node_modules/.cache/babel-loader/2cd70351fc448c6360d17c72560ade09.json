{"ast":null,"code":"/*\n * GregorianCalendar class\n * @ignore\n * @author yiminghe@gmail.com\n */\n'use strict';\n\nvar toInt = parseInt;\n\nvar Utils = require('./utils');\n\nvar defaultLocale = require('./locale/en_US');\n\nvar Const = require('./const');\n/*\n * GregorianCalendar class.\n *\n * - no arguments:\n *   Constructs a default GregorianCalendar using the current time\n *   in the default time zone with the default locale.\n * - one argument locale:\n *   Constructs a GregorianCalendar\n *   based on the current time in the default time zone with the given locale.\n *\n * @class Date.Gregorian\n */\n\n\nfunction GregorianCalendar(loc) {\n  var locale = loc || defaultLocale;\n  this.locale = locale;\n  this.fields = [];\n  /*\n   * The currently set time for this date.\n   * @protected\n   * @type Number|undefined\n   */\n\n  this.time = undefined;\n  /*\n   * The timezoneOffset in minutes used by this date.\n   * @type Number\n   * @protected\n   */\n\n  this.timezoneOffset = locale.timezoneOffset;\n  /*\n   * The first day of the week\n   * @type Number\n   * @protected\n   */\n\n  this.firstDayOfWeek = locale.firstDayOfWeek;\n  /*\n   * The number of days required for the first week in a month or year,\n   * with possible values from 1 to 7.\n   * @@protected\n   * @type Number\n   */\n\n  this.minimalDaysInFirstWeek = locale.minimalDaysInFirstWeek;\n  this.fieldsComputed = false;\n}\n\nUtils.mix(GregorianCalendar, Const);\nUtils.mix(GregorianCalendar, {\n  Utils: Utils,\n  defaultLocale: defaultLocale,\n\n  /*\n   * Determines if the given year is a leap year.\n   * Returns true if the given year is a leap year. To specify BC year numbers,\n   * 1 - year number must be given. For example, year BC 4 is specified as -3.\n   * @param {Number} year the given year.\n   * @returns {Boolean} true if the given year is a leap year; false otherwise.\n   * @static\n   * @method\n   */\n  isLeapYear: Utils.isLeapYear,\n\n  /*\n   * Enum indicating year field of date\n   * @type Number\n   */\n  YEAR: 1,\n\n  /*\n   * Enum indicating month field of date\n   * @type Number\n   */\n  MONTH: 2,\n\n  /*\n   * Enum indicating the day of the month\n   * @type Number\n   */\n  DAY_OF_MONTH: 3,\n\n  /*\n   * Enum indicating the hour (24).\n   * @type Number\n   */\n  HOUR_OF_DAY: 4,\n\n  /*\n   * Enum indicating the minute of the day\n   * @type Number\n   */\n  MINUTES: 5,\n\n  /*\n   * Enum indicating the second of the day\n   * @type Number\n   */\n  SECONDS: 6,\n\n  /*\n   * Enum indicating the millisecond of the day\n   * @type Number\n   */\n  MILLISECONDS: 7,\n\n  /*\n   * Enum indicating the week number within the current year\n   * @type Number\n   */\n  WEEK_OF_YEAR: 8,\n\n  /*\n   * Enum indicating the week number within the current month\n   * @type Number\n   */\n  WEEK_OF_MONTH: 9,\n\n  /*\n   * Enum indicating the day of the day number within the current year\n   * @type Number\n   */\n  DAY_OF_YEAR: 10,\n\n  /*\n   * Enum indicating the day of the week\n   * @type Number\n   */\n  DAY_OF_WEEK: 11,\n\n  /*\n   * Enum indicating the day of the ordinal number of the day of the week\n   * @type Number\n   */\n  DAY_OF_WEEK_IN_MONTH: 12,\n\n  /*\n   * Enum indicating am\n   * @type Number\n   */\n  AM: 0,\n\n  /*\n   * Enum indicating pm\n   * @type Number\n   */\n  PM: 1\n});\nvar FIELDS = ['', 'Year', 'Month', 'DayOfMonth', 'HourOfDay', 'Minutes', 'Seconds', 'Milliseconds', 'WeekOfYear', 'WeekOfMonth', 'DayOfYear', 'DayOfWeek', 'DayOfWeekInMonth'];\nvar YEAR = GregorianCalendar.YEAR;\nvar MONTH = GregorianCalendar.MONTH;\nvar DAY_OF_MONTH = GregorianCalendar.DAY_OF_MONTH;\nvar HOUR_OF_DAY = GregorianCalendar.HOUR_OF_DAY;\nvar MINUTE = GregorianCalendar.MINUTES;\nvar SECONDS = GregorianCalendar.SECONDS;\nvar MILLISECONDS = GregorianCalendar.MILLISECONDS;\nvar DAY_OF_WEEK_IN_MONTH = GregorianCalendar.DAY_OF_WEEK_IN_MONTH;\nvar DAY_OF_YEAR = GregorianCalendar.DAY_OF_YEAR;\nvar DAY_OF_WEEK = GregorianCalendar.DAY_OF_WEEK;\nvar WEEK_OF_MONTH = GregorianCalendar.WEEK_OF_MONTH;\nvar WEEK_OF_YEAR = GregorianCalendar.WEEK_OF_YEAR;\nvar MONTH_LENGTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based\n\nvar LEAP_MONTH_LENGTH = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based\n\nvar ONE_SECOND = 1000;\nvar ONE_MINUTE = 60 * ONE_SECOND;\nvar ONE_HOUR = 60 * ONE_MINUTE;\nvar ONE_DAY = 24 * ONE_HOUR;\nvar ONE_WEEK = ONE_DAY * 7;\nvar EPOCH_OFFSET = 719163; // Fixed date of January 1, 1970 (Gregorian)\n\nvar mod = Utils.mod;\nvar _isLeapYear = Utils.isLeapYear;\nvar floorDivide = Math.floor;\nvar MIN_VALUES = [undefined, 1, // YEAR\nGregorianCalendar.JANUARY, // MONTH\n1, // DAY_OF_MONTH\n0, // HOUR_OF_DAY\n0, // MINUTE\n0, // SECONDS\n0, // MILLISECONDS\n1, // WEEK_OF_YEAR\nundefined, // WEEK_OF_MONTH\n1, // DAY_OF_YEAR\nGregorianCalendar.SUNDAY, // DAY_OF_WEEK\n1]; // DAY_OF_WEEK_IN_MONTH\n\nvar MAX_VALUES = [undefined, 292278994, // YEAR\nGregorianCalendar.DECEMBER, // MONTH\nundefined, // DAY_OF_MONTH\n23, // HOUR_OF_DAY\n59, // MINUTE\n59, // SECONDS\n999, // MILLISECONDS\nundefined, // WEEK_OF_YEAR\nundefined, // WEEK_OF_MONTH\nundefined, // DAY_OF_YEAR\nGregorianCalendar.SATURDAY, // DAY_OF_WEEK\nundefined]; // ------------------- private start\n// DAY_OF_WEEK_IN_MONTH\n\nfunction getMonthLength(year, month) {\n  return _isLeapYear(year) ? LEAP_MONTH_LENGTH[month] : MONTH_LENGTH[month];\n}\n\nfunction getYearLength(year) {\n  return _isLeapYear(year) ? 366 : 365;\n}\n\nfunction adjustDayOfMonth(self) {\n  var fields = self.fields;\n  var year = fields[YEAR];\n  var month = fields[MONTH];\n  var monthLen = getMonthLength(year, month);\n  var dayOfMonth = fields[DAY_OF_MONTH];\n\n  if (dayOfMonth > monthLen) {\n    self.set(DAY_OF_MONTH, monthLen);\n  }\n}\n\nfunction getDayOfWeekDateOnOrBefore(fixedDate, dayOfWeek) {\n  // 1.1.1 is monday\n  // one week has 7 days\n  return fixedDate - mod(fixedDate - dayOfWeek, 7);\n}\n\nfunction getWeekNumber(self, fixedDay1, fixedDate) {\n  var fixedDay1st = getDayOfWeekDateOnOrBefore(fixedDay1 + 6, self.firstDayOfWeek);\n  var nDays = fixedDay1st - fixedDay1;\n\n  if (nDays >= self.minimalDaysInFirstWeek) {\n    fixedDay1st -= 7;\n  }\n\n  var normalizedDayOfPeriod = fixedDate - fixedDay1st;\n  return floorDivide(normalizedDayOfPeriod / 7) + 1;\n} // ------------------- private end\n\n\nGregorianCalendar.prototype = {\n  constructor: GregorianCalendar,\n  isGregorianCalendar: 1,\n\n  /*\n   * Determines if current year is a leap year.\n   * Returns true if the given year is a leap year. To specify BC year numbers,\n   * 1 - year number must be given. For example, year BC 4 is specified as -3.\n   * @returns {Boolean} true if the given year is a leap year; false otherwise.\n   * @method\n   * @member Date.Gregorian\n   */\n  isLeapYear: function isLeapYear() {\n    return _isLeapYear(this.getYear());\n  },\n\n  /*\n   * Return local info for current date instance\n   * @returns {Object}\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  },\n\n  /*\n   * Returns the minimum value for\n   * the given calendar field of this GregorianCalendar instance.\n   * The minimum value is defined as the smallest value\n   * returned by the get method for any possible time value,\n   * taking into consideration the current values of the getFirstDayOfWeek,\n   * getMinimalDaysInFirstWeek.\n   * @param field the calendar field.\n   * @returns {Number} the minimum value for the given calendar field.\n   */\n  getActualMinimum: function getActualMinimum(field) {\n    if (MIN_VALUES[field] !== undefined) {\n      return MIN_VALUES[field];\n    }\n\n    if (field === WEEK_OF_MONTH) {\n      var cal = this.clone();\n      cal.clear();\n      cal.set(this.fields[YEAR], this.fields[MONTH], 1);\n      return cal.get(WEEK_OF_MONTH);\n    }\n\n    throw new Error('minimum value not defined!');\n  },\n\n  /*\n   * Returns the maximum value for the given calendar field\n   * of this GregorianCalendar instance.\n   * The maximum value is defined as the largest value returned\n   * by the get method for any possible time value, taking into consideration\n   * the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek methods.\n   * @param field the calendar field.\n   * @returns {Number} the maximum value for the given calendar field.\n   */\n  getActualMaximum: function getActualMaximum(field) {\n    if (MAX_VALUES[field] !== undefined) {\n      return MAX_VALUES[field];\n    }\n\n    var value = undefined;\n    var fields = this.fields;\n\n    switch (field) {\n      case DAY_OF_MONTH:\n        value = getMonthLength(fields[YEAR], fields[MONTH]);\n        break;\n\n      case WEEK_OF_YEAR:\n        var endOfYear = this.clone();\n        endOfYear.clear();\n        endOfYear.set(fields[YEAR], GregorianCalendar.DECEMBER, 31);\n        value = endOfYear.get(WEEK_OF_YEAR);\n\n        if (value === 1) {\n          value = 52;\n        }\n\n        break;\n\n      case WEEK_OF_MONTH:\n        var endOfMonth = this.clone();\n        endOfMonth.clear();\n        endOfMonth.set(fields[YEAR], fields[MONTH], getMonthLength(fields[YEAR], fields[MONTH]));\n        value = endOfMonth.get(WEEK_OF_MONTH);\n        break;\n\n      case DAY_OF_YEAR:\n        value = getYearLength(fields[YEAR]);\n        break;\n\n      case DAY_OF_WEEK_IN_MONTH:\n        value = toInt((getMonthLength(fields[YEAR], fields[MONTH]) - 1) / 7) + 1;\n        break;\n\n      default:\n        break;\n    }\n\n    if (value === undefined) {\n      throw new Error('maximum value not defined!');\n    }\n\n    return value;\n  },\n\n  /*\n   * Determines if the given calendar field has a value set,\n   * including cases that the value has been set by internal fields calculations\n   * triggered by a get method call.\n   * @param field the calendar field to be cleared.\n   * @returns {boolean} true if the given calendar field has a value set; false otherwise.\n   */\n  isSet: function isSet(field) {\n    return this.fields[field] !== undefined;\n  },\n\n  /*\n   * Converts the time value (millisecond offset from the Epoch)\n   * to calendar field values.\n   * @protected\n   */\n  computeFields: function computeFields() {\n    var time = this.time;\n    var timezoneOffset = this.timezoneOffset * ONE_MINUTE;\n    var fixedDate = toInt(timezoneOffset / ONE_DAY);\n    var timeOfDay = timezoneOffset % ONE_DAY;\n    fixedDate += toInt(time / ONE_DAY);\n    timeOfDay += time % ONE_DAY;\n\n    if (timeOfDay >= ONE_DAY) {\n      timeOfDay -= ONE_DAY;\n      fixedDate++;\n    } else {\n      while (timeOfDay < 0) {\n        timeOfDay += ONE_DAY;\n        fixedDate--;\n      }\n    }\n\n    fixedDate += EPOCH_OFFSET;\n    var date = Utils.getGregorianDateFromFixedDate(fixedDate);\n    var year = date.year;\n    var fields = this.fields;\n    fields[YEAR] = year;\n    fields[MONTH] = date.month;\n    fields[DAY_OF_MONTH] = date.dayOfMonth;\n    fields[DAY_OF_WEEK] = date.dayOfWeek;\n\n    if (timeOfDay !== 0) {\n      fields[HOUR_OF_DAY] = toInt(timeOfDay / ONE_HOUR);\n      var r = timeOfDay % ONE_HOUR;\n      fields[MINUTE] = toInt(r / ONE_MINUTE);\n      r %= ONE_MINUTE;\n      fields[SECONDS] = toInt(r / ONE_SECOND);\n      fields[MILLISECONDS] = r % ONE_SECOND;\n    } else {\n      fields[HOUR_OF_DAY] = fields[MINUTE] = fields[SECONDS] = fields[MILLISECONDS] = 0;\n    }\n\n    var fixedDateJan1 = Utils.getFixedDate(year, GregorianCalendar.JANUARY, 1);\n    var dayOfYear = fixedDate - fixedDateJan1 + 1;\n    var fixDateMonth1 = fixedDate - date.dayOfMonth + 1;\n    fields[DAY_OF_YEAR] = dayOfYear;\n    fields[DAY_OF_WEEK_IN_MONTH] = toInt((date.dayOfMonth - 1) / 7) + 1;\n    var weekOfYear = getWeekNumber(this, fixedDateJan1, fixedDate); // 本周没有足够的时间在当前年\n\n    if (weekOfYear === 0) {\n      // If the date belongs to the last week of the\n      // previous year, use the week number of \"12/31\" of\n      // the \"previous\" year.\n      var fixedDec31 = fixedDateJan1 - 1;\n      var prevJan1 = fixedDateJan1 - getYearLength(year - 1);\n      weekOfYear = getWeekNumber(this, prevJan1, fixedDec31);\n    } else // 本周是年末最后一周，可能有足够的时间在新的一年\n      if (weekOfYear >= 52) {\n        var nextJan1 = fixedDateJan1 + getYearLength(year);\n        var nextJan1st = getDayOfWeekDateOnOrBefore(nextJan1 + 6, this.firstDayOfWeek);\n        var nDays = nextJan1st - nextJan1; // 本周有足够天数在新的一年\n\n        if (nDays >= this.minimalDaysInFirstWeek && // 当天确实在本周，weekOfYear === 53 时是不需要这个判断\n        fixedDate >= nextJan1st - 7) {\n          weekOfYear = 1;\n        }\n      }\n\n    fields[WEEK_OF_YEAR] = weekOfYear;\n    fields[WEEK_OF_MONTH] = getWeekNumber(this, fixDateMonth1, fixedDate);\n    this.fieldsComputed = true;\n  },\n\n  /*\n   * Converts calendar field values to the time value\n   * (millisecond offset from the Epoch).\n   * @protected\n   */\n  computeTime: function computeTime() {\n    var year = undefined;\n    var fields = this.fields;\n\n    if (this.isSet(YEAR)) {\n      year = fields[YEAR];\n    } else {\n      year = new Date().getFullYear();\n    }\n\n    var timeOfDay = 0;\n\n    if (this.isSet(HOUR_OF_DAY)) {\n      timeOfDay += fields[HOUR_OF_DAY];\n    }\n\n    timeOfDay *= 60;\n    timeOfDay += fields[MINUTE] || 0;\n    timeOfDay *= 60;\n    timeOfDay += fields[SECONDS] || 0;\n    timeOfDay *= 1000;\n    timeOfDay += fields[MILLISECONDS] || 0;\n    var fixedDate = 0;\n    fields[YEAR] = year;\n    fixedDate = fixedDate + this.getFixedDate(); // millis represents local wall-clock time in milliseconds.\n\n    var millis = (fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;\n    millis -= this.timezoneOffset * ONE_MINUTE;\n    this.time = millis;\n    this.computeFields();\n  },\n\n  /*\n   * Fills in any unset fields in the calendar fields. First,\n   * the computeTime() method is called if the time value (millisecond offset from the Epoch)\n   * has not been calculated from calendar field values.\n   * Then, the computeFields() method is called to calculate all calendar field values.\n   * @protected\n   */\n  complete: function complete() {\n    if (this.time === undefined) {\n      this.computeTime();\n    }\n\n    if (!this.fieldsComputed) {\n      this.computeFields();\n    }\n  },\n  getFixedDate: function getFixedDate() {\n    var self = this;\n    var fields = self.fields;\n    var firstDayOfWeekCfg = self.firstDayOfWeek;\n    var year = fields[YEAR];\n    var month = GregorianCalendar.JANUARY;\n\n    if (self.isSet(MONTH)) {\n      month = fields[MONTH];\n\n      if (month > GregorianCalendar.DECEMBER) {\n        year += toInt(month / 12);\n        month %= 12;\n      } else if (month < GregorianCalendar.JANUARY) {\n        year += floorDivide(month / 12);\n        month = mod(month, 12);\n      }\n    } // Get the fixed date since Jan 1, 1 (Gregorian). We are on\n    // the first day of either `month' or January in 'year'.\n\n\n    var fixedDate = Utils.getFixedDate(year, month, 1);\n    var firstDayOfWeek = undefined;\n    var dayOfWeek = self.firstDayOfWeek;\n\n    if (self.isSet(DAY_OF_WEEK)) {\n      dayOfWeek = fields[DAY_OF_WEEK];\n    }\n\n    if (self.isSet(MONTH)) {\n      if (self.isSet(DAY_OF_MONTH)) {\n        fixedDate += fields[DAY_OF_MONTH] - 1;\n      } else {\n        if (self.isSet(WEEK_OF_MONTH)) {\n          firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg); // If we have enough days in the first week, then\n          // move to the previous week.\n\n          if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {\n            firstDayOfWeek -= 7;\n          }\n\n          if (dayOfWeek !== firstDayOfWeekCfg) {\n            firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);\n          }\n\n          fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_MONTH] - 1);\n        } else {\n          var dowim = undefined;\n\n          if (self.isSet(DAY_OF_WEEK_IN_MONTH)) {\n            dowim = fields[DAY_OF_WEEK_IN_MONTH];\n          } else {\n            dowim = 1;\n          }\n\n          var lastDate = 7 * dowim;\n\n          if (dowim < 0) {\n            lastDate = getMonthLength(year, month) + 7 * (dowim + 1);\n          }\n\n          fixedDate = getDayOfWeekDateOnOrBefore(fixedDate + lastDate - 1, dayOfWeek);\n        }\n      }\n    } else {\n      // We are on the first day of the year.\n      if (self.isSet(DAY_OF_YEAR)) {\n        fixedDate += fields[DAY_OF_YEAR] - 1;\n      } else if (self.isSet(WEEK_OF_YEAR)) {\n        firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg); // If we have enough days in the first week, then move\n        // to the previous week.\n\n        if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {\n          firstDayOfWeek -= 7;\n        }\n\n        if (dayOfWeek !== firstDayOfWeekCfg) {\n          firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);\n        }\n\n        fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_YEAR] - 1);\n      }\n    }\n\n    return fixedDate;\n  },\n\n  /*\n   * Returns this Calendar's time value in milliseconds\n   * @member Date.Gregorian\n   * @returns {Number} the current time as UTC milliseconds from the epoch.\n   */\n  getTime: function getTime() {\n    if (this.time === undefined) {\n      this.computeTime();\n    }\n\n    return this.time;\n  },\n\n  /*\n   * Sets this Calendar's current time from the given long value.\n   * @param time the new time in UTC milliseconds from the epoch.\n   */\n  setTime: function setTime(time) {\n    this.time = time;\n    this.fieldsComputed = false;\n    this.complete();\n  },\n\n  /*\n   * Returns the value of the given calendar field.\n   * @param field the given calendar field.\n   * @returns {Number} the value for the given calendar field.\n   */\n  get: function get(field) {\n    this.complete();\n    return this.fields[field];\n  },\n\n  /*\n   * Returns the year of the given calendar field.\n   * @method getYear\n   * @returns {Number} the year for the given calendar field.\n   */\n\n  /*\n   * Returns the month of the given calendar field.\n   * @method getMonth\n   * @returns {Number} the month for the given calendar field.\n   */\n\n  /*\n   * Returns the day of month of the given calendar field.\n   * @method getDayOfMonth\n   * @returns {Number} the day of month for the given calendar field.\n   */\n\n  /*\n   * Returns the hour of day of the given calendar field.\n   * @method getHourOfDay\n   * @returns {Number} the hour of day for the given calendar field.\n   */\n\n  /*\n   * Returns the minute of the given calendar field.\n   * @method getMinute\n   * @returns {Number} the minute for the given calendar field.\n   */\n\n  /*\n   * Returns the second of the given calendar field.\n   * @method getSecond\n   * @returns {Number} the second for the given calendar field.\n   */\n\n  /*\n   * Returns the millisecond of the given calendar field.\n   * @method getMilliSecond\n   * @returns {Number} the millisecond for the given calendar field.\n   */\n\n  /*\n   * Returns the week of year of the given calendar field.\n   * @method getWeekOfYear\n   * @returns {Number} the week of year for the given calendar field.\n   */\n\n  /*\n   * Returns the week of month of the given calendar field.\n   * @method getWeekOfMonth\n   * @returns {Number} the week of month for the given calendar field.\n   */\n\n  /*\n   * Returns the day of year of the given calendar field.\n   * @method getDayOfYear\n   * @returns {Number} the day of year for the given calendar field.\n   */\n\n  /*\n   * Returns the day of week of the given calendar field.\n   * @method getDayOfWeek\n   * @returns {Number} the day of week for the given calendar field.\n   */\n\n  /*\n   * Returns the day of week in month of the given calendar field.\n   * @method getDayOfWeekInMonth\n   * @returns {Number} the day of week in month for the given calendar field.\n   */\n\n  /*\n   * Sets the given calendar field to the given value.\n   * @param field the given calendar field.\n   * @param v the value to be set for the given calendar field.\n   */\n  set: function set(field, v) {\n    var len = arguments.length;\n\n    if (len === 2) {\n      this.fields[field] = v;\n    } else if (len < MILLISECONDS + 1) {\n      for (var i = 0; i < len; i++) {\n        this.fields[YEAR + i] = arguments[i];\n      }\n    } else {\n      throw new Error('illegal arguments for GregorianCalendar set');\n    }\n\n    this.time = undefined;\n  },\n\n  /*\n   * Set the year of the given calendar field.\n   * @method setYear\n   */\n\n  /*\n   * Set the month of the given calendar field.\n   * @method setMonth\n   */\n\n  /*\n   * Set the day of month of the given calendar field.\n   * @method setDayOfMonth\n   */\n\n  /*\n   * Set the hour of day of the given calendar field.\n   * @method setHourOfDay\n   */\n\n  /*\n   * Set the minute of the given calendar field.\n   * @method setMinute\n   */\n\n  /*\n   * Set the second of the given calendar field.\n   * @method setSecond\n   */\n\n  /*\n   * Set the millisecond of the given calendar field.\n   * @method setMilliSecond\n   */\n\n  /*\n   * Set the week of year of the given calendar field.\n   * @method setWeekOfYear\n   */\n\n  /*\n   * Set the week of month of the given calendar field.\n   * @method setWeekOfMonth\n   */\n\n  /*\n   * Set the day of year of the given calendar field.\n   * @method setDayOfYear\n   */\n\n  /*\n   * Set the day of week of the given calendar field.\n   * @method setDayOfWeek\n   */\n\n  /*\n   * Set the day of week in month of the given calendar field.\n   * @method setDayOfWeekInMonth\n   */\n\n  /*\n   * add for specified field based on two rules:\n   *\n   *  - Add rule 1. The value of field after the call minus the value of field before the\n   *  call is amount, modulo any overflow that has occurred in field\n   *  Overflow occurs when a field value exceeds its range and,\n   *  as a result, the next larger field is incremented or\n   *  decremented and the field value is adjusted back into its range.\n   *\n   *  - Add rule 2. If a smaller field is expected to be invariant,\n   *  but it is impossible for it to be equal to its\n   *  prior value because of changes in its minimum or maximum after\n   *  field is changed, then its value is adjusted to be as close\n   *  as possible to its expected value. A smaller field represents a\n   *  smaller unit of time. HOUR_OF_DAY is a smaller field than\n   *  DAY_OF_MONTH. No adjustment is made to smaller fields\n   *  that are not expected to be invariant. The calendar system\n   *  determines what fields are expected to be invariant.\n   *\n   *\n   *      @example\n   *      use('date/gregorian',function(S, GregorianCalendar){\n   *          const d = new GregorianCalendar();\n   *          d.set(2012, GregorianCalendar.JANUARY, 31);\n   *          d.add(Gregorian.MONTH,1);\n   *          // 2012-2-29\n   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())\n   *          d.add(Gregorian.MONTH,12);\n   *          // 2013-2-28\n   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())\n   *      });\n   *\n   * @param field the calendar field.\n   * @param {Number} amount he amount of date or time to be added to the field.\n   */\n  add: function add(field, a) {\n    if (!a) {\n      return;\n    }\n\n    var amount = a;\n    var self = this;\n    var fields = self.fields; // computer and retrieve original value\n\n    var value = self.get(field);\n\n    if (field === YEAR) {\n      value += amount;\n      self.set(YEAR, value);\n      adjustDayOfMonth(self);\n    } else if (field === MONTH) {\n      value += amount;\n      var yearAmount = floorDivide(value / 12);\n      value = mod(value, 12);\n\n      if (yearAmount) {\n        self.set(YEAR, fields[YEAR] + yearAmount);\n      }\n\n      self.set(MONTH, value);\n      adjustDayOfMonth(self);\n    } else {\n      switch (field) {\n        case HOUR_OF_DAY:\n          amount *= ONE_HOUR;\n          break;\n\n        case MINUTE:\n          amount *= ONE_MINUTE;\n          break;\n\n        case SECONDS:\n          amount *= ONE_SECOND;\n          break;\n\n        case MILLISECONDS:\n          break;\n\n        case WEEK_OF_MONTH:\n        case WEEK_OF_YEAR:\n        case DAY_OF_WEEK_IN_MONTH:\n          amount *= ONE_WEEK;\n          break;\n\n        case DAY_OF_WEEK:\n        case DAY_OF_YEAR:\n        case DAY_OF_MONTH:\n          amount *= ONE_DAY;\n          break;\n\n        default:\n          throw new Error('illegal field for add');\n      }\n\n      self.setTime(self.time + amount);\n    }\n  },\n\n  /*\n   * add the year of the given calendar field.\n   * @method addYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the month of the given calendar field.\n   * @method addMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of month of the given calendar field.\n   * @method addDayOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the hour of day of the given calendar field.\n   * @method addHourOfDay\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the minute of the given calendar field.\n   * @method addMinute\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the second of the given calendar field.\n   * @method addSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the millisecond of the given calendar field.\n   * @method addMilliSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the week of year of the given calendar field.\n   * @method addWeekOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the week of month of the given calendar field.\n   * @method addWeekOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of year of the given calendar field.\n   * @method addDayOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of week of the given calendar field.\n   * @method addDayOfWeek\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of week in month of the given calendar field.\n   * @method addDayOfWeekInMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * Get rolled value for the field\n   * @protected\n   */\n  getRolledValue: function getRolledValue(value, a, min, max) {\n    var amount = a;\n    var diff = value - min;\n    var range = max - min + 1;\n    amount %= range;\n    return min + (diff + amount + range) % range;\n  },\n\n  /*\n   * Adds a signed amount to the specified calendar field without changing larger fields.\n   * A negative roll amount means to subtract from field without changing\n   * larger fields. If the specified amount is 0, this method performs nothing.\n   *\n   *\n   *\n   *      @example\n   *      const d = new GregorianCalendar();\n   *      d.set(1999, GregorianCalendar.AUGUST, 31);\n   *      // 1999-4-30\n   *      // Tuesday June 1, 1999\n   *      d.set(1999, GregorianCalendar.JUNE, 1);\n   *      d.add(Gregorian.WEEK_OF_MONTH,-1); // === d.add(Gregorian.WEEK_OF_MONTH,\n   *      d.get(Gregorian.WEEK_OF_MONTH));\n   *      // 1999-06-29\n   *\n   *\n   * @param field the calendar field.\n   * @param {Number} amount the signed amount to add to field.\n   */\n  roll: function roll(field, amount) {\n    if (!amount) {\n      return;\n    }\n\n    var self = this; // computer and retrieve original value\n\n    var value = self.get(field);\n    var min = self.getActualMinimum(field);\n    var max = self.getActualMaximum(field);\n    value = self.getRolledValue(value, amount, min, max);\n    self.set(field, value); // consider compute time priority\n\n    switch (field) {\n      case MONTH:\n        adjustDayOfMonth(self);\n        break;\n\n      default:\n        // other fields are set already when get\n        self.updateFieldsBySet(field);\n        break;\n    }\n  },\n\n  /*\n   * keep field stable.\n   *\n   * 2015-09-29 setMonth 2 vs rollSetMonth 2\n   *\n   */\n  rollSet: function rollSet(field, v) {\n    this.set(field, v);\n\n    switch (field) {\n      case MONTH:\n        adjustDayOfMonth(this);\n        break;\n\n      default:\n        // other fields are set already when get\n        this.updateFieldsBySet(field);\n        break;\n    }\n  },\n\n  /*\n   * roll the year of the given calendar field.\n   * @method rollYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the month of the given calendar field.\n   * @param {Number} amount the signed amount to add to field.\n   * @method rollMonth\n   */\n\n  /*\n   * roll the day of month of the given calendar field.\n   * @method rollDayOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the hour of day of the given calendar field.\n   * @method rollHourOfDay\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the minute of the given calendar field.\n   * @method rollMinute\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the second of the given calendar field.\n   * @method rollSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the millisecond of the given calendar field.\n   * @method rollMilliSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the week of year of the given calendar field.\n   * @method rollWeekOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the week of month of the given calendar field.\n   * @method rollWeekOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the day of year of the given calendar field.\n   * @method rollDayOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the day of week of the given calendar field.\n   * @method rollDayOfWeek\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * remove other priority fields when call getFixedDate\n   * precondition: other fields are all set or computed\n   * @protected\n   */\n  updateFieldsBySet: function updateFieldsBySet(field) {\n    var fields = this.fields;\n\n    switch (field) {\n      case WEEK_OF_MONTH:\n        fields[DAY_OF_MONTH] = undefined;\n        break;\n\n      case DAY_OF_YEAR:\n        fields[MONTH] = undefined;\n        break;\n\n      case DAY_OF_WEEK:\n        fields[DAY_OF_MONTH] = undefined;\n        break;\n\n      case WEEK_OF_YEAR:\n        fields[DAY_OF_YEAR] = undefined;\n        fields[MONTH] = undefined;\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /*\n   * get current date instance's timezone offset\n   * @returns {Number}\n   */\n  getTimezoneOffset: function getTimezoneOffset() {\n    return this.timezoneOffset;\n  },\n\n  /*\n   * set current date instance's timezone offset\n   */\n  setTimezoneOffset: function setTimezoneOffset(timezoneOffset) {\n    if (this.timezoneOffset !== timezoneOffset) {\n      this.fieldsComputed = undefined;\n      this.timezoneOffset = timezoneOffset;\n    }\n  },\n\n  /*\n   * set first day of week for current date instance\n   */\n  setFirstDayOfWeek: function setFirstDayOfWeek(firstDayOfWeek) {\n    if (this.firstDayOfWeek !== firstDayOfWeek) {\n      this.firstDayOfWeek = firstDayOfWeek;\n      this.fieldsComputed = false;\n    }\n  },\n\n  /*\n   * Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.\n   * @returns {Number} the first day of the week.\n   */\n  getFirstDayOfWeek: function getFirstDayOfWeek() {\n    return this.firstDayOfWeek;\n  },\n\n  /*\n   * Sets what the minimal days required in the first week of the year are; For example,\n   * if the first week is defined as one that contains the first day of the first month of a year,\n   * call this method with value 1.\n   * If it must be a full week, use value 7.\n   * @param minimalDaysInFirstWeek the given minimal days required in the first week of the year.\n   */\n  setMinimalDaysInFirstWeek: function setMinimalDaysInFirstWeek(minimalDaysInFirstWeek) {\n    if (this.minimalDaysInFirstWeek !== minimalDaysInFirstWeek) {\n      this.minimalDaysInFirstWeek = minimalDaysInFirstWeek;\n      this.fieldsComputed = false;\n    }\n  },\n\n  /*\n   * Gets what the minimal days required in the first week of the year are; e.g.,\n   * if the first week is defined as one that contains the first day of the first month of a year,\n   * this method returns 1.\n   * If the minimal days required must be a full week, this method returns 7.\n   * @returns {Number} the minimal days required in the first week of the year.\n   */\n  getMinimalDaysInFirstWeek: function getMinimalDaysInFirstWeek() {\n    return this.minimalDaysInFirstWeek;\n  },\n\n  /*\n   * Returns the number of weeks in the week year\n   * represented by this GregorianCalendar.\n   *\n   * For example, if this GregorianCalendar's date is\n   * December 31, 2008 with the ISO\n   * 8601 compatible setting, this method will return 53 for the\n   * period: December 29, 2008 to January 3, 2010\n   * while getActualMaximum(WEEK_OF_YEAR) will return\n   * 52 for the period: December 31, 2007 to December 28, 2008.\n   *\n   * @return {Number} the number of weeks in the week year.\n   */\n  getWeeksInWeekYear: function getWeeksInWeekYear() {\n    var weekYear = this.getWeekYear();\n\n    if (weekYear === this.get(YEAR)) {\n      return this.getActualMaximum(WEEK_OF_YEAR);\n    } // Use the 2nd week for calculating the max of WEEK_OF_YEAR\n\n\n    var gc = this.clone();\n    gc.clear();\n    gc.setWeekDate(weekYear, 2, this.get(DAY_OF_WEEK));\n    return gc.getActualMaximum(WEEK_OF_YEAR);\n  },\n\n  /*\n   * Returns the week year represented by this GregorianCalendar.\n   * The dates in the weeks between 1 and the\n   * maximum week number of the week year have the same week year value\n   * that may be one year before or after the calendar year value.\n   *\n   * @return {Number} the week year represented by this GregorianCalendar.\n   */\n  getWeekYear: function getWeekYear() {\n    var year = this.get(YEAR); // implicitly  complete\n\n    var weekOfYear = this.get(WEEK_OF_YEAR);\n    var month = this.get(MONTH);\n\n    if (month === GregorianCalendar.JANUARY) {\n      if (weekOfYear >= 52) {\n        --year;\n      }\n    } else if (month === GregorianCalendar.DECEMBER) {\n      if (weekOfYear === 1) {\n        ++year;\n      }\n    }\n\n    return year;\n  },\n\n  /*\n   * Sets this GregorianCalendar to the date given by the date specifiers - weekYear,\n   * weekOfYear, and dayOfWeek. weekOfYear follows the WEEK_OF_YEAR numbering.\n   * The dayOfWeek value must be one of the DAY_OF_WEEK values: SUNDAY to SATURDAY.\n   *\n   * @param weekYear    the week year\n   * @param weekOfYear  the week number based on weekYear\n   * @param dayOfWeek   the day of week value\n   */\n  setWeekDate: function setWeekDate(weekYear, weekOfYear, dayOfWeek) {\n    if (dayOfWeek < GregorianCalendar.SUNDAY || dayOfWeek > GregorianCalendar.SATURDAY) {\n      throw new Error('invalid dayOfWeek: ' + dayOfWeek);\n    }\n\n    var fields = this.fields; // To avoid changing the time of day fields by date\n    // calculations, use a clone with the GMT time zone.\n\n    var gc = this.clone();\n    gc.clear();\n    gc.setTimezoneOffset(0);\n    gc.set(YEAR, weekYear);\n    gc.set(WEEK_OF_YEAR, 1);\n    gc.set(DAY_OF_WEEK, this.getFirstDayOfWeek());\n    var days = dayOfWeek - this.getFirstDayOfWeek();\n\n    if (days < 0) {\n      days += 7;\n    }\n\n    days += 7 * (weekOfYear - 1);\n\n    if (days !== 0) {\n      gc.add(DAY_OF_YEAR, days);\n    } else {\n      gc.complete();\n    }\n\n    fields[YEAR] = gc.get(YEAR);\n    fields[MONTH] = gc.get(MONTH);\n    fields[DAY_OF_MONTH] = gc.get(DAY_OF_MONTH);\n    this.complete();\n  },\n\n  /*\n   * Creates and returns a copy of this object.\n   * @returns {Date.Gregorian}\n   */\n  clone: function clone() {\n    if (this.time === undefined) {\n      this.computeTime();\n    }\n\n    var cal = new GregorianCalendar(this.locale);\n    cal.setTimezoneOffset(cal.getTimezoneOffset());\n    cal.setFirstDayOfWeek(cal.getFirstDayOfWeek());\n    cal.setMinimalDaysInFirstWeek(cal.getMinimalDaysInFirstWeek());\n    cal.setTime(this.time);\n    return cal;\n  },\n\n  /*\n   * Compares this GregorianCalendar to the specified Object.\n   * The result is true if and only if the argument is a GregorianCalendar object\n   * that represents the same time value (millisecond offset from the Epoch)\n   * under the same Calendar parameters and Gregorian change date as this object.\n   * @param {Date.Gregorian} obj the object to compare with.\n   * @returns {boolean} true if this object is equal to obj; false otherwise.\n   */\n  equals: function equals(obj) {\n    return this.getTime() === obj.getTime() && this.firstDayOfWeek === obj.firstDayOfWeek && this.timezoneOffset === obj.timezoneOffset && this.minimalDaysInFirstWeek === obj.minimalDaysInFirstWeek;\n  },\n  compareToDay: function compareToDay(d2) {\n    var d1Year = this.getYear();\n    var d2Year = d2.getYear();\n    var d1Month = this.getMonth();\n    var d2Month = d2.getMonth();\n    var d1Day = this.getDayOfMonth();\n    var d2Day = d2.getDayOfMonth();\n\n    if (d1Year !== d2Year) {\n      return d1Year - d2Year;\n    }\n\n    if (d1Month !== d2Month) {\n      return d1Month - d2Month;\n    }\n\n    return d1Day - d2Day;\n  },\n\n  /*\n   * Sets all the calendar field values or specified field and the time value\n   * (millisecond offset from the Epoch) of this Calendar undefined.\n   * This means that isSet() will return false for all the calendar fields,\n   * and the date and time calculations will treat the fields as if they had never been set.\n   * @param [field] the calendar field to be cleared.\n   */\n  clear: function clear(field) {\n    if (field === undefined) {\n      this.field = [];\n    } else {\n      this.fields[field] = undefined;\n    }\n\n    this.time = undefined;\n    this.fieldsComputed = false;\n  },\n  toString: function toString() {\n    // for debug\n    var v = this;\n    return '[GregorianCalendar]: ' + v.getYear() + '/' + v.getMonth() + '/' + v.getDayOfMonth() + ' ' + v.getHourOfDay() + ':' + v.getMinutes() + ':' + v.getSeconds();\n  }\n};\nvar GregorianCalendarProto = GregorianCalendar.prototype;\nUtils.each(FIELDS, function (f, index) {\n  if (f) {\n    GregorianCalendarProto['get' + f] = function get() {\n      return this.get(index);\n    };\n\n    GregorianCalendarProto['isSet' + f] = function isSet() {\n      return this.isSet(index);\n    };\n\n    GregorianCalendarProto['set' + f] = function set(v) {\n      return this.set(index, v);\n    };\n\n    GregorianCalendarProto['add' + f] = function add(v) {\n      return this.add(index, v);\n    };\n\n    GregorianCalendarProto['roll' + f] = function roll(v) {\n      return this.roll(index, v);\n    };\n\n    GregorianCalendarProto['rollSet' + f] = function rollSet(v) {\n      return this.rollSet(index, v);\n    };\n  }\n});\nmodule.exports = GregorianCalendar;\n/*\n http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html\n\n TODO\n - day saving time\n - i18n\n - julian calendar\n */","map":{"version":3,"sources":["/home/sachin/Desktop/React/photography/node_modules/gregorian-calendar/lib/gregorian-calendar.js"],"names":["toInt","parseInt","Utils","require","defaultLocale","Const","GregorianCalendar","loc","locale","fields","time","undefined","timezoneOffset","firstDayOfWeek","minimalDaysInFirstWeek","fieldsComputed","mix","isLeapYear","YEAR","MONTH","DAY_OF_MONTH","HOUR_OF_DAY","MINUTES","SECONDS","MILLISECONDS","WEEK_OF_YEAR","WEEK_OF_MONTH","DAY_OF_YEAR","DAY_OF_WEEK","DAY_OF_WEEK_IN_MONTH","AM","PM","FIELDS","MINUTE","MONTH_LENGTH","LEAP_MONTH_LENGTH","ONE_SECOND","ONE_MINUTE","ONE_HOUR","ONE_DAY","ONE_WEEK","EPOCH_OFFSET","mod","_isLeapYear","floorDivide","Math","floor","MIN_VALUES","JANUARY","SUNDAY","MAX_VALUES","DECEMBER","SATURDAY","getMonthLength","year","month","getYearLength","adjustDayOfMonth","self","monthLen","dayOfMonth","set","getDayOfWeekDateOnOrBefore","fixedDate","dayOfWeek","getWeekNumber","fixedDay1","fixedDay1st","nDays","normalizedDayOfPeriod","prototype","constructor","isGregorianCalendar","getYear","getLocale","getActualMinimum","field","cal","clone","clear","get","Error","getActualMaximum","value","endOfYear","endOfMonth","isSet","computeFields","timeOfDay","date","getGregorianDateFromFixedDate","r","fixedDateJan1","getFixedDate","dayOfYear","fixDateMonth1","weekOfYear","fixedDec31","prevJan1","nextJan1","nextJan1st","computeTime","Date","getFullYear","millis","complete","firstDayOfWeekCfg","dowim","lastDate","getTime","setTime","v","len","arguments","length","i","add","a","amount","yearAmount","getRolledValue","min","max","diff","range","roll","updateFieldsBySet","rollSet","getTimezoneOffset","setTimezoneOffset","setFirstDayOfWeek","getFirstDayOfWeek","setMinimalDaysInFirstWeek","getMinimalDaysInFirstWeek","getWeeksInWeekYear","weekYear","getWeekYear","gc","setWeekDate","days","equals","obj","compareToDay","d2","d1Year","d2Year","d1Month","getMonth","d2Month","d1Day","getDayOfMonth","d2Day","toString","getHourOfDay","getMinutes","getSeconds","GregorianCalendarProto","each","f","index","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,QAAZ;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAIC,MAAM,GAAGD,GAAG,IAAIH,aAApB;AAEA,OAAKI,MAAL,GAAcA,MAAd;AAEA,OAAKC,MAAL,GAAc,EAAd;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,IAAL,GAAYC,SAAZ;AACA;AACF;AACA;AACA;AACA;;AAEE,OAAKC,cAAL,GAAsBJ,MAAM,CAACI,cAA7B;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsBL,MAAM,CAACK,cAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,sBAAL,GAA8BN,MAAM,CAACM,sBAArC;AAEA,OAAKC,cAAL,GAAsB,KAAtB;AACD;;AAEDb,KAAK,CAACc,GAAN,CAAUV,iBAAV,EAA6BD,KAA7B;AAEAH,KAAK,CAACc,GAAN,CAAUV,iBAAV,EAA6B;AAC3BJ,EAAAA,KAAK,EAAEA,KADoB;AAG3BE,EAAAA,aAAa,EAAEA,aAHY;;AAK3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEa,EAAAA,UAAU,EAAEf,KAAK,CAACe,UAdS;;AAgB3B;AACF;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,CApBqB;;AAqB3B;AACF;AACA;AACA;AACEC,EAAAA,KAAK,EAAE,CAzBoB;;AA0B3B;AACF;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,CA9Ba;;AA+B3B;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,CAnCc;;AAoC3B;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,CAxCkB;;AAyC3B;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,CA7CkB;;AA8C3B;AACF;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,CAlDa;;AAmD3B;AACF;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,CAvDa;;AAwD3B;AACF;AACA;AACA;AACEC,EAAAA,aAAa,EAAE,CA5DY;;AA8D3B;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,EAlEc;;AAmE3B;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,EAvEc;;AAwE3B;AACF;AACA;AACA;AACEC,EAAAA,oBAAoB,EAAE,EA5EK;;AA8E3B;AACF;AACA;AACA;AACEC,EAAAA,EAAE,EAAE,CAlFuB;;AAmF3B;AACF;AACA;AACA;AACEC,EAAAA,EAAE,EAAE;AAvFuB,CAA7B;AA0FA,IAAIC,MAAM,GAAG,CAAC,EAAD,EAAK,MAAL,EAAa,OAAb,EAAsB,YAAtB,EAAoC,WAApC,EAAiD,SAAjD,EAA4D,SAA5D,EAAuE,cAAvE,EAAuF,YAAvF,EAAqG,aAArG,EAAoH,WAApH,EAAiI,WAAjI,EAA8I,kBAA9I,CAAb;AAEA,IAAId,IAAI,GAAGZ,iBAAiB,CAACY,IAA7B;AACA,IAAIC,KAAK,GAAGb,iBAAiB,CAACa,KAA9B;AACA,IAAIC,YAAY,GAAGd,iBAAiB,CAACc,YAArC;AACA,IAAIC,WAAW,GAAGf,iBAAiB,CAACe,WAApC;AACA,IAAIY,MAAM,GAAG3B,iBAAiB,CAACgB,OAA/B;AACA,IAAIC,OAAO,GAAGjB,iBAAiB,CAACiB,OAAhC;AAEA,IAAIC,YAAY,GAAGlB,iBAAiB,CAACkB,YAArC;AACA,IAAIK,oBAAoB,GAAGvB,iBAAiB,CAACuB,oBAA7C;AACA,IAAIF,WAAW,GAAGrB,iBAAiB,CAACqB,WAApC;AACA,IAAIC,WAAW,GAAGtB,iBAAiB,CAACsB,WAApC;AAEA,IAAIF,aAAa,GAAGpB,iBAAiB,CAACoB,aAAtC;AACA,IAAID,YAAY,GAAGnB,iBAAiB,CAACmB,YAArC;AAEA,IAAIS,YAAY,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAAnB,C,CAAqE;;AACrE,IAAIC,iBAAiB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAAxB,C,CAA0E;;AAE1E,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,UAAU,GAAG,KAAKD,UAAtB;AACA,IAAIE,QAAQ,GAAG,KAAKD,UAApB;AACA,IAAIE,OAAO,GAAG,KAAKD,QAAnB;AACA,IAAIE,QAAQ,GAAGD,OAAO,GAAG,CAAzB;AAEA,IAAIE,YAAY,GAAG,MAAnB,C,CAA2B;;AAE3B,IAAIC,GAAG,GAAGxC,KAAK,CAACwC,GAAhB;AACA,IAAIC,WAAW,GAAGzC,KAAK,CAACe,UAAxB;AACA,IAAI2B,WAAW,GAAGC,IAAI,CAACC,KAAvB;AAEA,IAAIC,UAAU,GAAG,CAACpC,SAAD,EAAY,CAAZ,EAAe;AAChCL,iBAAiB,CAAC0C,OADD,EACU;AAC3B,CAFiB,EAEd;AACH,CAHiB,EAGd;AACH,CAJiB,EAId;AACH,CALiB,EAKd;AACH,CANiB,EAMd;AAEH,CARiB,EAQd;AACHrC,SATiB,EASN;AAEX,CAXiB,EAWd;AACHL,iBAAiB,CAAC2C,MAZD,EAYS;AAC1B,CAbiB,CAAjB,C,CAeA;;AACA,IAAIC,UAAU,GAAG,CAACvC,SAAD,EAAY,SAAZ,EAAuB;AACxCL,iBAAiB,CAAC6C,QADD,EACW;AAC5BxC,SAFiB,EAEN;AACX,EAHiB,EAGb;AACJ,EAJiB,EAIb;AACJ,EALiB,EAKb;AACJ,GANiB,EAMZ;AACLA,SAPiB,EAON;AACXA,SARiB,EAQN;AACXA,SATiB,EASN;AACXL,iBAAiB,CAAC8C,QAVD,EAUW;AAC5BzC,SAXiB,CAAjB,C,CAaA;AAEA;;AACA,SAAS0C,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC,SAAOZ,WAAW,CAACW,IAAD,CAAX,GAAoBnB,iBAAiB,CAACoB,KAAD,CAArC,GAA+CrB,YAAY,CAACqB,KAAD,CAAlE;AACD;;AAED,SAASC,aAAT,CAAuBF,IAAvB,EAA6B;AAC3B,SAAOX,WAAW,CAACW,IAAD,CAAX,GAAoB,GAApB,GAA0B,GAAjC;AACD;;AAED,SAASG,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAIjD,MAAM,GAAGiD,IAAI,CAACjD,MAAlB;AACA,MAAI6C,IAAI,GAAG7C,MAAM,CAACS,IAAD,CAAjB;AACA,MAAIqC,KAAK,GAAG9C,MAAM,CAACU,KAAD,CAAlB;AACA,MAAIwC,QAAQ,GAAGN,cAAc,CAACC,IAAD,EAAOC,KAAP,CAA7B;AACA,MAAIK,UAAU,GAAGnD,MAAM,CAACW,YAAD,CAAvB;;AACA,MAAIwC,UAAU,GAAGD,QAAjB,EAA2B;AACzBD,IAAAA,IAAI,CAACG,GAAL,CAASzC,YAAT,EAAuBuC,QAAvB;AACD;AACF;;AAED,SAASG,0BAAT,CAAoCC,SAApC,EAA+CC,SAA/C,EAA0D;AACxD;AACA;AACA,SAAOD,SAAS,GAAGrB,GAAG,CAACqB,SAAS,GAAGC,SAAb,EAAwB,CAAxB,CAAtB;AACD;;AAED,SAASC,aAAT,CAAuBP,IAAvB,EAA6BQ,SAA7B,EAAwCH,SAAxC,EAAmD;AACjD,MAAII,WAAW,GAAGL,0BAA0B,CAACI,SAAS,GAAG,CAAb,EAAgBR,IAAI,CAAC7C,cAArB,CAA5C;AACA,MAAIuD,KAAK,GAAGD,WAAW,GAAGD,SAA1B;;AACA,MAAIE,KAAK,IAAIV,IAAI,CAAC5C,sBAAlB,EAA0C;AACxCqD,IAAAA,WAAW,IAAI,CAAf;AACD;;AACD,MAAIE,qBAAqB,GAAGN,SAAS,GAAGI,WAAxC;AACA,SAAOvB,WAAW,CAACyB,qBAAqB,GAAG,CAAzB,CAAX,GAAyC,CAAhD;AACD,C,CAED;;;AAEA/D,iBAAiB,CAACgE,SAAlB,GAA8B;AAC5BC,EAAAA,WAAW,EAAEjE,iBADe;AAG5BkE,EAAAA,mBAAmB,EAAE,CAHO;;AAK5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEvD,EAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,WAAO0B,WAAW,CAAC,KAAK8B,OAAL,EAAD,CAAlB;AACD,GAf2B;;AAiB5B;AACF;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAO,KAAKlE,MAAZ;AACD,GAvB2B;;AAyB5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEmE,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AACjD,QAAI7B,UAAU,CAAC6B,KAAD,CAAV,KAAsBjE,SAA1B,EAAqC;AACnC,aAAOoC,UAAU,CAAC6B,KAAD,CAAjB;AACD;;AACD,QAAIA,KAAK,KAAKlD,aAAd,EAA6B;AAC3B,UAAImD,GAAG,GAAG,KAAKC,KAAL,EAAV;AACAD,MAAAA,GAAG,CAACE,KAAJ;AACAF,MAAAA,GAAG,CAAChB,GAAJ,CAAQ,KAAKpD,MAAL,CAAYS,IAAZ,CAAR,EAA2B,KAAKT,MAAL,CAAYU,KAAZ,CAA3B,EAA+C,CAA/C;AACA,aAAO0D,GAAG,CAACG,GAAJ,CAAQtD,aAAR,CAAP;AACD;;AAED,UAAM,IAAIuD,KAAJ,CAAU,4BAAV,CAAN;AACD,GA/C2B;;AAiD5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BN,KAA1B,EAAiC;AACjD,QAAI1B,UAAU,CAAC0B,KAAD,CAAV,KAAsBjE,SAA1B,EAAqC;AACnC,aAAOuC,UAAU,CAAC0B,KAAD,CAAjB;AACD;;AACD,QAAIO,KAAK,GAAGxE,SAAZ;AACA,QAAIF,MAAM,GAAG,KAAKA,MAAlB;;AACA,YAAQmE,KAAR;AACE,WAAKxD,YAAL;AACE+D,QAAAA,KAAK,GAAG9B,cAAc,CAAC5C,MAAM,CAACS,IAAD,CAAP,EAAeT,MAAM,CAACU,KAAD,CAArB,CAAtB;AACA;;AAEF,WAAKM,YAAL;AACE,YAAI2D,SAAS,GAAG,KAAKN,KAAL,EAAhB;AACAM,QAAAA,SAAS,CAACL,KAAV;AACAK,QAAAA,SAAS,CAACvB,GAAV,CAAcpD,MAAM,CAACS,IAAD,CAApB,EAA4BZ,iBAAiB,CAAC6C,QAA9C,EAAwD,EAAxD;AACAgC,QAAAA,KAAK,GAAGC,SAAS,CAACJ,GAAV,CAAcvD,YAAd,CAAR;;AACA,YAAI0D,KAAK,KAAK,CAAd,EAAiB;AACfA,UAAAA,KAAK,GAAG,EAAR;AACD;;AACD;;AAEF,WAAKzD,aAAL;AACE,YAAI2D,UAAU,GAAG,KAAKP,KAAL,EAAjB;AACAO,QAAAA,UAAU,CAACN,KAAX;AACAM,QAAAA,UAAU,CAACxB,GAAX,CAAepD,MAAM,CAACS,IAAD,CAArB,EAA6BT,MAAM,CAACU,KAAD,CAAnC,EAA4CkC,cAAc,CAAC5C,MAAM,CAACS,IAAD,CAAP,EAAeT,MAAM,CAACU,KAAD,CAArB,CAA1D;AACAgE,QAAAA,KAAK,GAAGE,UAAU,CAACL,GAAX,CAAetD,aAAf,CAAR;AACA;;AAEF,WAAKC,WAAL;AACEwD,QAAAA,KAAK,GAAG3B,aAAa,CAAC/C,MAAM,CAACS,IAAD,CAAP,CAArB;AACA;;AAEF,WAAKW,oBAAL;AACEsD,QAAAA,KAAK,GAAGnF,KAAK,CAAC,CAACqD,cAAc,CAAC5C,MAAM,CAACS,IAAD,CAAP,EAAeT,MAAM,CAACU,KAAD,CAArB,CAAd,GAA8C,CAA/C,IAAoD,CAArD,CAAL,GAA+D,CAAvE;AACA;;AACF;AACE;AA9BJ;;AAgCA,QAAIgE,KAAK,KAAKxE,SAAd,EAAyB;AACvB,YAAM,IAAIsE,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,WAAOE,KAAP;AACD,GApG2B;;AAsG5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeV,KAAf,EAAsB;AAC3B,WAAO,KAAKnE,MAAL,CAAYmE,KAAZ,MAAuBjE,SAA9B;AACD,GA/G2B;;AAiH5B;AACF;AACA;AACA;AACA;AACE4E,EAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC,QAAI7E,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIE,cAAc,GAAG,KAAKA,cAAL,GAAsByB,UAA3C;AACA,QAAI0B,SAAS,GAAG/D,KAAK,CAACY,cAAc,GAAG2B,OAAlB,CAArB;AACA,QAAIiD,SAAS,GAAG5E,cAAc,GAAG2B,OAAjC;AACAwB,IAAAA,SAAS,IAAI/D,KAAK,CAACU,IAAI,GAAG6B,OAAR,CAAlB;AACAiD,IAAAA,SAAS,IAAI9E,IAAI,GAAG6B,OAApB;;AACA,QAAIiD,SAAS,IAAIjD,OAAjB,EAA0B;AACxBiD,MAAAA,SAAS,IAAIjD,OAAb;AACAwB,MAAAA,SAAS;AACV,KAHD,MAGO;AACL,aAAOyB,SAAS,GAAG,CAAnB,EAAsB;AACpBA,QAAAA,SAAS,IAAIjD,OAAb;AACAwB,QAAAA,SAAS;AACV;AACF;;AAEDA,IAAAA,SAAS,IAAItB,YAAb;AAEA,QAAIgD,IAAI,GAAGvF,KAAK,CAACwF,6BAAN,CAAoC3B,SAApC,CAAX;AAEA,QAAIT,IAAI,GAAGmC,IAAI,CAACnC,IAAhB;AAEA,QAAI7C,MAAM,GAAG,KAAKA,MAAlB;AACAA,IAAAA,MAAM,CAACS,IAAD,CAAN,GAAeoC,IAAf;AACA7C,IAAAA,MAAM,CAACU,KAAD,CAAN,GAAgBsE,IAAI,CAAClC,KAArB;AACA9C,IAAAA,MAAM,CAACW,YAAD,CAAN,GAAuBqE,IAAI,CAAC7B,UAA5B;AACAnD,IAAAA,MAAM,CAACmB,WAAD,CAAN,GAAsB6D,IAAI,CAACzB,SAA3B;;AAEA,QAAIwB,SAAS,KAAK,CAAlB,EAAqB;AACnB/E,MAAAA,MAAM,CAACY,WAAD,CAAN,GAAsBrB,KAAK,CAACwF,SAAS,GAAGlD,QAAb,CAA3B;AACA,UAAIqD,CAAC,GAAGH,SAAS,GAAGlD,QAApB;AACA7B,MAAAA,MAAM,CAACwB,MAAD,CAAN,GAAiBjC,KAAK,CAAC2F,CAAC,GAAGtD,UAAL,CAAtB;AACAsD,MAAAA,CAAC,IAAItD,UAAL;AACA5B,MAAAA,MAAM,CAACc,OAAD,CAAN,GAAkBvB,KAAK,CAAC2F,CAAC,GAAGvD,UAAL,CAAvB;AACA3B,MAAAA,MAAM,CAACe,YAAD,CAAN,GAAuBmE,CAAC,GAAGvD,UAA3B;AACD,KAPD,MAOO;AACL3B,MAAAA,MAAM,CAACY,WAAD,CAAN,GAAsBZ,MAAM,CAACwB,MAAD,CAAN,GAAiBxB,MAAM,CAACc,OAAD,CAAN,GAAkBd,MAAM,CAACe,YAAD,CAAN,GAAuB,CAAhF;AACD;;AAED,QAAIoE,aAAa,GAAG1F,KAAK,CAAC2F,YAAN,CAAmBvC,IAAnB,EAAyBhD,iBAAiB,CAAC0C,OAA3C,EAAoD,CAApD,CAApB;AACA,QAAI8C,SAAS,GAAG/B,SAAS,GAAG6B,aAAZ,GAA4B,CAA5C;AACA,QAAIG,aAAa,GAAGhC,SAAS,GAAG0B,IAAI,CAAC7B,UAAjB,GAA8B,CAAlD;AAEAnD,IAAAA,MAAM,CAACkB,WAAD,CAAN,GAAsBmE,SAAtB;AACArF,IAAAA,MAAM,CAACoB,oBAAD,CAAN,GAA+B7B,KAAK,CAAC,CAACyF,IAAI,CAAC7B,UAAL,GAAkB,CAAnB,IAAwB,CAAzB,CAAL,GAAmC,CAAlE;AAEA,QAAIoC,UAAU,GAAG/B,aAAa,CAAC,IAAD,EAAO2B,aAAP,EAAsB7B,SAAtB,CAA9B,CA/CsC,CAiDtC;;AACA,QAAIiC,UAAU,KAAK,CAAnB,EAAsB;AACpB;AACA;AACA;AACA,UAAIC,UAAU,GAAGL,aAAa,GAAG,CAAjC;AACA,UAAIM,QAAQ,GAAGN,aAAa,GAAGpC,aAAa,CAACF,IAAI,GAAG,CAAR,CAA5C;AACA0C,MAAAA,UAAU,GAAG/B,aAAa,CAAC,IAAD,EAAOiC,QAAP,EAAiBD,UAAjB,CAA1B;AACD,KAPD,MAQE;AACA,UAAID,UAAU,IAAI,EAAlB,EAAsB;AACpB,YAAIG,QAAQ,GAAGP,aAAa,GAAGpC,aAAa,CAACF,IAAD,CAA5C;AACA,YAAI8C,UAAU,GAAGtC,0BAA0B,CAACqC,QAAQ,GAAG,CAAZ,EAAe,KAAKtF,cAApB,CAA3C;AACA,YAAIuD,KAAK,GAAGgC,UAAU,GAAGD,QAAzB,CAHoB,CAIpB;;AACA,YAAI/B,KAAK,IAAI,KAAKtD,sBAAd,IACJ;AACAiD,QAAAA,SAAS,IAAIqC,UAAU,GAAG,CAF1B,EAE6B;AAC3BJ,UAAAA,UAAU,GAAG,CAAb;AACD;AACF;;AAEHvF,IAAAA,MAAM,CAACgB,YAAD,CAAN,GAAuBuE,UAAvB;AACAvF,IAAAA,MAAM,CAACiB,aAAD,CAAN,GAAwBuC,aAAa,CAAC,IAAD,EAAO8B,aAAP,EAAsBhC,SAAtB,CAArC;AAEA,SAAKhD,cAAL,GAAsB,IAAtB;AACD,GAjM2B;;AAmM5B;AACF;AACA;AACA;AACA;AACEsF,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,QAAI/C,IAAI,GAAG3C,SAAX;AACA,QAAIF,MAAM,GAAG,KAAKA,MAAlB;;AACA,QAAI,KAAK6E,KAAL,CAAWpE,IAAX,CAAJ,EAAsB;AACpBoC,MAAAA,IAAI,GAAG7C,MAAM,CAACS,IAAD,CAAb;AACD,KAFD,MAEO;AACLoC,MAAAA,IAAI,GAAG,IAAIgD,IAAJ,GAAWC,WAAX,EAAP;AACD;;AACD,QAAIf,SAAS,GAAG,CAAhB;;AACA,QAAI,KAAKF,KAAL,CAAWjE,WAAX,CAAJ,EAA6B;AAC3BmE,MAAAA,SAAS,IAAI/E,MAAM,CAACY,WAAD,CAAnB;AACD;;AACDmE,IAAAA,SAAS,IAAI,EAAb;AACAA,IAAAA,SAAS,IAAI/E,MAAM,CAACwB,MAAD,CAAN,IAAkB,CAA/B;AACAuD,IAAAA,SAAS,IAAI,EAAb;AACAA,IAAAA,SAAS,IAAI/E,MAAM,CAACc,OAAD,CAAN,IAAmB,CAAhC;AACAiE,IAAAA,SAAS,IAAI,IAAb;AACAA,IAAAA,SAAS,IAAI/E,MAAM,CAACe,YAAD,CAAN,IAAwB,CAArC;AACA,QAAIuC,SAAS,GAAG,CAAhB;AACAtD,IAAAA,MAAM,CAACS,IAAD,CAAN,GAAeoC,IAAf;AACAS,IAAAA,SAAS,GAAGA,SAAS,GAAG,KAAK8B,YAAL,EAAxB,CApBkC,CAqBlC;;AACA,QAAIW,MAAM,GAAG,CAACzC,SAAS,GAAGtB,YAAb,IAA6BF,OAA7B,GAAuCiD,SAApD;AACAgB,IAAAA,MAAM,IAAI,KAAK5F,cAAL,GAAsByB,UAAhC;AACA,SAAK3B,IAAL,GAAY8F,MAAZ;AACA,SAAKjB,aAAL;AACD,GAlO2B;;AAoO5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEkB,EAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,QAAI,KAAK/F,IAAL,KAAcC,SAAlB,EAA6B;AAC3B,WAAK0F,WAAL;AACD;;AACD,QAAI,CAAC,KAAKtF,cAAV,EAA0B;AACxB,WAAKwE,aAAL;AACD;AACF,GAlP2B;AAoP5BM,EAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,QAAInC,IAAI,GAAG,IAAX;AAEA,QAAIjD,MAAM,GAAGiD,IAAI,CAACjD,MAAlB;AAEA,QAAIiG,iBAAiB,GAAGhD,IAAI,CAAC7C,cAA7B;AAEA,QAAIyC,IAAI,GAAG7C,MAAM,CAACS,IAAD,CAAjB;AAEA,QAAIqC,KAAK,GAAGjD,iBAAiB,CAAC0C,OAA9B;;AAEA,QAAIU,IAAI,CAAC4B,KAAL,CAAWnE,KAAX,CAAJ,EAAuB;AACrBoC,MAAAA,KAAK,GAAG9C,MAAM,CAACU,KAAD,CAAd;;AACA,UAAIoC,KAAK,GAAGjD,iBAAiB,CAAC6C,QAA9B,EAAwC;AACtCG,QAAAA,IAAI,IAAItD,KAAK,CAACuD,KAAK,GAAG,EAAT,CAAb;AACAA,QAAAA,KAAK,IAAI,EAAT;AACD,OAHD,MAGO,IAAIA,KAAK,GAAGjD,iBAAiB,CAAC0C,OAA9B,EAAuC;AAC5CM,QAAAA,IAAI,IAAIV,WAAW,CAACW,KAAK,GAAG,EAAT,CAAnB;AACAA,QAAAA,KAAK,GAAGb,GAAG,CAACa,KAAD,EAAQ,EAAR,CAAX;AACD;AACF,KApBmC,CAsBpC;AACA;;;AACA,QAAIQ,SAAS,GAAG7D,KAAK,CAAC2F,YAAN,CAAmBvC,IAAnB,EAAyBC,KAAzB,EAAgC,CAAhC,CAAhB;AACA,QAAI1C,cAAc,GAAGF,SAArB;AACA,QAAIqD,SAAS,GAAGN,IAAI,CAAC7C,cAArB;;AAEA,QAAI6C,IAAI,CAAC4B,KAAL,CAAW1D,WAAX,CAAJ,EAA6B;AAC3BoC,MAAAA,SAAS,GAAGvD,MAAM,CAACmB,WAAD,CAAlB;AACD;;AAED,QAAI8B,IAAI,CAAC4B,KAAL,CAAWnE,KAAX,CAAJ,EAAuB;AACrB,UAAIuC,IAAI,CAAC4B,KAAL,CAAWlE,YAAX,CAAJ,EAA8B;AAC5B2C,QAAAA,SAAS,IAAItD,MAAM,CAACW,YAAD,CAAN,GAAuB,CAApC;AACD,OAFD,MAEO;AACL,YAAIsC,IAAI,CAAC4B,KAAL,CAAW5D,aAAX,CAAJ,EAA+B;AAC7Bb,UAAAA,cAAc,GAAGiD,0BAA0B,CAACC,SAAS,GAAG,CAAb,EAAgB2C,iBAAhB,CAA3C,CAD6B,CAG7B;AACA;;AACA,cAAI7F,cAAc,GAAGkD,SAAjB,IAA8BL,IAAI,CAAC5C,sBAAvC,EAA+D;AAC7DD,YAAAA,cAAc,IAAI,CAAlB;AACD;;AAED,cAAImD,SAAS,KAAK0C,iBAAlB,EAAqC;AACnC7F,YAAAA,cAAc,GAAGiD,0BAA0B,CAACjD,cAAc,GAAG,CAAlB,EAAqBmD,SAArB,CAA3C;AACD;;AAEDD,UAAAA,SAAS,GAAGlD,cAAc,GAAG,KAAKJ,MAAM,CAACiB,aAAD,CAAN,GAAwB,CAA7B,CAA7B;AACD,SAdD,MAcO;AACL,cAAIiF,KAAK,GAAGhG,SAAZ;;AACA,cAAI+C,IAAI,CAAC4B,KAAL,CAAWzD,oBAAX,CAAJ,EAAsC;AACpC8E,YAAAA,KAAK,GAAGlG,MAAM,CAACoB,oBAAD,CAAd;AACD,WAFD,MAEO;AACL8E,YAAAA,KAAK,GAAG,CAAR;AACD;;AACD,cAAIC,QAAQ,GAAG,IAAID,KAAnB;;AACA,cAAIA,KAAK,GAAG,CAAZ,EAAe;AACbC,YAAAA,QAAQ,GAAGvD,cAAc,CAACC,IAAD,EAAOC,KAAP,CAAd,GAA8B,KAAKoD,KAAK,GAAG,CAAb,CAAzC;AACD;;AACD5C,UAAAA,SAAS,GAAGD,0BAA0B,CAACC,SAAS,GAAG6C,QAAZ,GAAuB,CAAxB,EAA2B5C,SAA3B,CAAtC;AACD;AACF;AACF,KAhCD,MAgCO;AACL;AACA,UAAIN,IAAI,CAAC4B,KAAL,CAAW3D,WAAX,CAAJ,EAA6B;AAC3BoC,QAAAA,SAAS,IAAItD,MAAM,CAACkB,WAAD,CAAN,GAAsB,CAAnC;AACD,OAFD,MAEO,IAAI+B,IAAI,CAAC4B,KAAL,CAAW7D,YAAX,CAAJ,EAA8B;AACnCZ,QAAAA,cAAc,GAAGiD,0BAA0B,CAACC,SAAS,GAAG,CAAb,EAAgB2C,iBAAhB,CAA3C,CADmC,CAEnC;AACA;;AACA,YAAI7F,cAAc,GAAGkD,SAAjB,IAA8BL,IAAI,CAAC5C,sBAAvC,EAA+D;AAC7DD,UAAAA,cAAc,IAAI,CAAlB;AACD;;AACD,YAAImD,SAAS,KAAK0C,iBAAlB,EAAqC;AACnC7F,UAAAA,cAAc,GAAGiD,0BAA0B,CAACjD,cAAc,GAAG,CAAlB,EAAqBmD,SAArB,CAA3C;AACD;;AACDD,QAAAA,SAAS,GAAGlD,cAAc,GAAG,KAAKJ,MAAM,CAACgB,YAAD,CAAN,GAAuB,CAA5B,CAA7B;AACD;AACF;;AAED,WAAOsC,SAAP;AACD,GAvU2B;;AAyU5B;AACF;AACA;AACA;AACA;AACE8C,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,QAAI,KAAKnG,IAAL,KAAcC,SAAlB,EAA6B;AAC3B,WAAK0F,WAAL;AACD;;AACD,WAAO,KAAK3F,IAAZ;AACD,GAnV2B;;AAqV5B;AACF;AACA;AACA;AACEoG,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBpG,IAAjB,EAAuB;AAC9B,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKK,cAAL,GAAsB,KAAtB;AACA,SAAK0F,QAAL;AACD,GA7V2B;;AA+V5B;AACF;AACA;AACA;AACA;AACEzB,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaJ,KAAb,EAAoB;AACvB,SAAK6B,QAAL;AACA,WAAO,KAAKhG,MAAL,CAAYmE,KAAZ,CAAP;AACD,GAvW2B;;AAyW5B;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACEf,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAae,KAAb,EAAoBmC,CAApB,EAAuB;AAC1B,QAAIC,GAAG,GAAGC,SAAS,CAACC,MAApB;;AACA,QAAIF,GAAG,KAAK,CAAZ,EAAe;AACb,WAAKvG,MAAL,CAAYmE,KAAZ,IAAqBmC,CAArB;AACD,KAFD,MAEO,IAAIC,GAAG,GAAGxF,YAAY,GAAG,CAAzB,EAA4B;AACjC,WAAK,IAAI2F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,aAAK1G,MAAL,CAAYS,IAAI,GAAGiG,CAAnB,IAAwBF,SAAS,CAACE,CAAD,CAAjC;AACD;AACF,KAJM,MAIA;AACL,YAAM,IAAIlC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAKvE,IAAL,GAAYC,SAAZ;AACD,GAlc2B;;AAoc5B;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEyG,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaxC,KAAb,EAAoByC,CAApB,EAAuB;AAC1B,QAAI,CAACA,CAAL,EAAQ;AACN;AACD;;AACD,QAAIC,MAAM,GAAGD,CAAb;AACA,QAAI3D,IAAI,GAAG,IAAX;AACA,QAAIjD,MAAM,GAAGiD,IAAI,CAACjD,MAAlB,CAN0B,CAO1B;;AACA,QAAI0E,KAAK,GAAGzB,IAAI,CAACsB,GAAL,CAASJ,KAAT,CAAZ;;AACA,QAAIA,KAAK,KAAK1D,IAAd,EAAoB;AAClBiE,MAAAA,KAAK,IAAImC,MAAT;AACA5D,MAAAA,IAAI,CAACG,GAAL,CAAS3C,IAAT,EAAeiE,KAAf;AACA1B,MAAAA,gBAAgB,CAACC,IAAD,CAAhB;AACD,KAJD,MAIO,IAAIkB,KAAK,KAAKzD,KAAd,EAAqB;AAC1BgE,MAAAA,KAAK,IAAImC,MAAT;AACA,UAAIC,UAAU,GAAG3E,WAAW,CAACuC,KAAK,GAAG,EAAT,CAA5B;AACAA,MAAAA,KAAK,GAAGzC,GAAG,CAACyC,KAAD,EAAQ,EAAR,CAAX;;AACA,UAAIoC,UAAJ,EAAgB;AACd7D,QAAAA,IAAI,CAACG,GAAL,CAAS3C,IAAT,EAAeT,MAAM,CAACS,IAAD,CAAN,GAAeqG,UAA9B;AACD;;AACD7D,MAAAA,IAAI,CAACG,GAAL,CAAS1C,KAAT,EAAgBgE,KAAhB;AACA1B,MAAAA,gBAAgB,CAACC,IAAD,CAAhB;AACD,KATM,MASA;AACL,cAAQkB,KAAR;AACE,aAAKvD,WAAL;AACEiG,UAAAA,MAAM,IAAIhF,QAAV;AACA;;AACF,aAAKL,MAAL;AACEqF,UAAAA,MAAM,IAAIjF,UAAV;AACA;;AACF,aAAKd,OAAL;AACE+F,UAAAA,MAAM,IAAIlF,UAAV;AACA;;AACF,aAAKZ,YAAL;AACE;;AACF,aAAKE,aAAL;AACA,aAAKD,YAAL;AACA,aAAKI,oBAAL;AACEyF,UAAAA,MAAM,IAAI9E,QAAV;AACA;;AACF,aAAKZ,WAAL;AACA,aAAKD,WAAL;AACA,aAAKP,YAAL;AACEkG,UAAAA,MAAM,IAAI/E,OAAV;AACA;;AACF;AACE,gBAAM,IAAI0C,KAAJ,CAAU,uBAAV,CAAN;AAvBJ;;AAyBAvB,MAAAA,IAAI,CAACoD,OAAL,CAAapD,IAAI,CAAChD,IAAL,GAAY4G,MAAzB;AACD;AACF,GArlB2B;;AAulB5B;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACEE,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBrC,KAAxB,EAA+BkC,CAA/B,EAAkCI,GAAlC,EAAuCC,GAAvC,EAA4C;AAC1D,QAAIJ,MAAM,GAAGD,CAAb;AACA,QAAIM,IAAI,GAAGxC,KAAK,GAAGsC,GAAnB;AACA,QAAIG,KAAK,GAAGF,GAAG,GAAGD,GAAN,GAAY,CAAxB;AACAH,IAAAA,MAAM,IAAIM,KAAV;AACA,WAAOH,GAAG,GAAG,CAACE,IAAI,GAAGL,MAAP,GAAgBM,KAAjB,IAA0BA,KAAvC;AACD,GAzqB2B;;AA2qB5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcjD,KAAd,EAAqB0C,MAArB,EAA6B;AACjC,QAAI,CAACA,MAAL,EAAa;AACX;AACD;;AACD,QAAI5D,IAAI,GAAG,IAAX,CAJiC,CAKjC;;AACA,QAAIyB,KAAK,GAAGzB,IAAI,CAACsB,GAAL,CAASJ,KAAT,CAAZ;AACA,QAAI6C,GAAG,GAAG/D,IAAI,CAACiB,gBAAL,CAAsBC,KAAtB,CAAV;AACA,QAAI8C,GAAG,GAAGhE,IAAI,CAACwB,gBAAL,CAAsBN,KAAtB,CAAV;AACAO,IAAAA,KAAK,GAAGzB,IAAI,CAAC8D,cAAL,CAAoBrC,KAApB,EAA2BmC,MAA3B,EAAmCG,GAAnC,EAAwCC,GAAxC,CAAR;AAEAhE,IAAAA,IAAI,CAACG,GAAL,CAASe,KAAT,EAAgBO,KAAhB,EAXiC,CAajC;;AACA,YAAQP,KAAR;AACE,WAAKzD,KAAL;AACEsC,QAAAA,gBAAgB,CAACC,IAAD,CAAhB;AACA;;AACF;AACE;AACAA,QAAAA,IAAI,CAACoE,iBAAL,CAAuBlD,KAAvB;AACA;AAPJ;AASD,GAvtB2B;;AAytB5B;AACF;AACA;AACA;AACA;AACA;AACEmD,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBnD,KAAjB,EAAwBmC,CAAxB,EAA2B;AAClC,SAAKlD,GAAL,CAASe,KAAT,EAAgBmC,CAAhB;;AACA,YAAQnC,KAAR;AACE,WAAKzD,KAAL;AACEsC,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA;;AACF;AACE;AACA,aAAKqE,iBAAL,CAAuBlD,KAAvB;AACA;AAPJ;AASD,GA1uB2B;;AA4uB5B;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACEkD,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BlD,KAA3B,EAAkC;AACnD,QAAInE,MAAM,GAAG,KAAKA,MAAlB;;AACA,YAAQmE,KAAR;AACE,WAAKlD,aAAL;AACEjB,QAAAA,MAAM,CAACW,YAAD,CAAN,GAAuBT,SAAvB;AACA;;AACF,WAAKgB,WAAL;AACElB,QAAAA,MAAM,CAACU,KAAD,CAAN,GAAgBR,SAAhB;AACA;;AACF,WAAKiB,WAAL;AACEnB,QAAAA,MAAM,CAACW,YAAD,CAAN,GAAuBT,SAAvB;AACA;;AACF,WAAKc,YAAL;AACEhB,QAAAA,MAAM,CAACkB,WAAD,CAAN,GAAsBhB,SAAtB;AACAF,QAAAA,MAAM,CAACU,KAAD,CAAN,GAAgBR,SAAhB;AACA;;AACF;AACE;AAfJ;AAiBD,GAt0B2B;;AAw0B5B;AACF;AACA;AACA;AACEqH,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,WAAO,KAAKpH,cAAZ;AACD,GA90B2B;;AAg1B5B;AACF;AACA;AACEqH,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BrH,cAA3B,EAA2C;AAC5D,QAAI,KAAKA,cAAL,KAAwBA,cAA5B,EAA4C;AAC1C,WAAKG,cAAL,GAAsBJ,SAAtB;AACA,WAAKC,cAAL,GAAsBA,cAAtB;AACD;AACF,GAx1B2B;;AA01B5B;AACF;AACA;AACEsH,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BrH,cAA3B,EAA2C;AAC5D,QAAI,KAAKA,cAAL,KAAwBA,cAA5B,EAA4C;AAC1C,WAAKA,cAAL,GAAsBA,cAAtB;AACA,WAAKE,cAAL,GAAsB,KAAtB;AACD;AACF,GAl2B2B;;AAo2B5B;AACF;AACA;AACA;AACEoH,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,WAAO,KAAKtH,cAAZ;AACD,GA12B2B;;AA42B5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEuH,EAAAA,yBAAyB,EAAE,SAASA,yBAAT,CAAmCtH,sBAAnC,EAA2D;AACpF,QAAI,KAAKA,sBAAL,KAAgCA,sBAApC,EAA4D;AAC1D,WAAKA,sBAAL,GAA8BA,sBAA9B;AACA,WAAKC,cAAL,GAAsB,KAAtB;AACD;AACF,GAx3B2B;;AA03B5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEsH,EAAAA,yBAAyB,EAAE,SAASA,yBAAT,GAAqC;AAC9D,WAAO,KAAKvH,sBAAZ;AACD,GAn4B2B;;AAq4B5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEwH,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;AAChD,QAAIC,QAAQ,GAAG,KAAKC,WAAL,EAAf;;AACA,QAAID,QAAQ,KAAK,KAAKvD,GAAL,CAAS9D,IAAT,CAAjB,EAAiC;AAC/B,aAAO,KAAKgE,gBAAL,CAAsBzD,YAAtB,CAAP;AACD,KAJ+C,CAKhD;;;AACA,QAAIgH,EAAE,GAAG,KAAK3D,KAAL,EAAT;AACA2D,IAAAA,EAAE,CAAC1D,KAAH;AACA0D,IAAAA,EAAE,CAACC,WAAH,CAAeH,QAAf,EAAyB,CAAzB,EAA4B,KAAKvD,GAAL,CAASpD,WAAT,CAA5B;AACA,WAAO6G,EAAE,CAACvD,gBAAH,CAAoBzD,YAApB,CAAP;AACD,GA55B2B;;AA85B5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE+G,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,QAAIlF,IAAI,GAAG,KAAK0B,GAAL,CAAS9D,IAAT,CAAX,CADkC,CACP;;AAC3B,QAAI8E,UAAU,GAAG,KAAKhB,GAAL,CAASvD,YAAT,CAAjB;AACA,QAAI8B,KAAK,GAAG,KAAKyB,GAAL,CAAS7D,KAAT,CAAZ;;AACA,QAAIoC,KAAK,KAAKjD,iBAAiB,CAAC0C,OAAhC,EAAyC;AACvC,UAAIgD,UAAU,IAAI,EAAlB,EAAsB;AACpB,UAAE1C,IAAF;AACD;AACF,KAJD,MAIO,IAAIC,KAAK,KAAKjD,iBAAiB,CAAC6C,QAAhC,EAA0C;AAC/C,UAAI6C,UAAU,KAAK,CAAnB,EAAsB;AACpB,UAAE1C,IAAF;AACD;AACF;;AACD,WAAOA,IAAP;AACD,GAp7B2B;;AAq7B5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEoF,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBH,QAArB,EAA+BvC,UAA/B,EAA2ChC,SAA3C,EAAsD;AACjE,QAAIA,SAAS,GAAG1D,iBAAiB,CAAC2C,MAA9B,IAAwCe,SAAS,GAAG1D,iBAAiB,CAAC8C,QAA1E,EAAoF;AAClF,YAAM,IAAI6B,KAAJ,CAAU,wBAAwBjB,SAAlC,CAAN;AACD;;AACD,QAAIvD,MAAM,GAAG,KAAKA,MAAlB,CAJiE,CAKjE;AACA;;AACA,QAAIgI,EAAE,GAAG,KAAK3D,KAAL,EAAT;AACA2D,IAAAA,EAAE,CAAC1D,KAAH;AACA0D,IAAAA,EAAE,CAACR,iBAAH,CAAqB,CAArB;AACAQ,IAAAA,EAAE,CAAC5E,GAAH,CAAO3C,IAAP,EAAaqH,QAAb;AACAE,IAAAA,EAAE,CAAC5E,GAAH,CAAOpC,YAAP,EAAqB,CAArB;AACAgH,IAAAA,EAAE,CAAC5E,GAAH,CAAOjC,WAAP,EAAoB,KAAKuG,iBAAL,EAApB;AACA,QAAIQ,IAAI,GAAG3E,SAAS,GAAG,KAAKmE,iBAAL,EAAvB;;AACA,QAAIQ,IAAI,GAAG,CAAX,EAAc;AACZA,MAAAA,IAAI,IAAI,CAAR;AACD;;AACDA,IAAAA,IAAI,IAAI,KAAK3C,UAAU,GAAG,CAAlB,CAAR;;AACA,QAAI2C,IAAI,KAAK,CAAb,EAAgB;AACdF,MAAAA,EAAE,CAACrB,GAAH,CAAOzF,WAAP,EAAoBgH,IAApB;AACD,KAFD,MAEO;AACLF,MAAAA,EAAE,CAAChC,QAAH;AACD;;AACDhG,IAAAA,MAAM,CAACS,IAAD,CAAN,GAAeuH,EAAE,CAACzD,GAAH,CAAO9D,IAAP,CAAf;AACAT,IAAAA,MAAM,CAACU,KAAD,CAAN,GAAgBsH,EAAE,CAACzD,GAAH,CAAO7D,KAAP,CAAhB;AACAV,IAAAA,MAAM,CAACW,YAAD,CAAN,GAAuBqH,EAAE,CAACzD,GAAH,CAAO5D,YAAP,CAAvB;AACA,SAAKqF,QAAL;AACD,GAz9B2B;;AA09B5B;AACF;AACA;AACA;AACE3B,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,QAAI,KAAKpE,IAAL,KAAcC,SAAlB,EAA6B;AAC3B,WAAK0F,WAAL;AACD;;AACD,QAAIxB,GAAG,GAAG,IAAIvE,iBAAJ,CAAsB,KAAKE,MAA3B,CAAV;AACAqE,IAAAA,GAAG,CAACoD,iBAAJ,CAAsBpD,GAAG,CAACmD,iBAAJ,EAAtB;AACAnD,IAAAA,GAAG,CAACqD,iBAAJ,CAAsBrD,GAAG,CAACsD,iBAAJ,EAAtB;AACAtD,IAAAA,GAAG,CAACuD,yBAAJ,CAA8BvD,GAAG,CAACwD,yBAAJ,EAA9B;AACAxD,IAAAA,GAAG,CAACiC,OAAJ,CAAY,KAAKpG,IAAjB;AACA,WAAOmE,GAAP;AACD,GAx+B2B;;AA0+B5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE+D,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AAC3B,WAAO,KAAKhC,OAAL,OAAmBgC,GAAG,CAAChC,OAAJ,EAAnB,IAAoC,KAAKhG,cAAL,KAAwBgI,GAAG,CAAChI,cAAhE,IAAkF,KAAKD,cAAL,KAAwBiI,GAAG,CAACjI,cAA9G,IAAgI,KAAKE,sBAAL,KAAgC+H,GAAG,CAAC/H,sBAA3K;AACD,GAp/B2B;AAs/B5BgI,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,EAAtB,EAA0B;AACtC,QAAIC,MAAM,GAAG,KAAKvE,OAAL,EAAb;AACA,QAAIwE,MAAM,GAAGF,EAAE,CAACtE,OAAH,EAAb;AACA,QAAIyE,OAAO,GAAG,KAAKC,QAAL,EAAd;AACA,QAAIC,OAAO,GAAGL,EAAE,CAACI,QAAH,EAAd;AACA,QAAIE,KAAK,GAAG,KAAKC,aAAL,EAAZ;AACA,QAAIC,KAAK,GAAGR,EAAE,CAACO,aAAH,EAAZ;;AACA,QAAIN,MAAM,KAAKC,MAAf,EAAuB;AACrB,aAAOD,MAAM,GAAGC,MAAhB;AACD;;AACD,QAAIC,OAAO,KAAKE,OAAhB,EAAyB;AACvB,aAAOF,OAAO,GAAGE,OAAjB;AACD;;AACD,WAAOC,KAAK,GAAGE,KAAf;AACD,GApgC2B;;AAsgC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACExE,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeH,KAAf,EAAsB;AAC3B,QAAIA,KAAK,KAAKjE,SAAd,EAAyB;AACvB,WAAKiE,KAAL,GAAa,EAAb;AACD,KAFD,MAEO;AACL,WAAKnE,MAAL,CAAYmE,KAAZ,IAAqBjE,SAArB;AACD;;AACD,SAAKD,IAAL,GAAYC,SAAZ;AACA,SAAKI,cAAL,GAAsB,KAAtB;AACD,GArhC2B;AAuhC5ByI,EAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B;AACA,QAAIzC,CAAC,GAAG,IAAR;AACA,WAAO,0BAA0BA,CAAC,CAACtC,OAAF,EAA1B,GAAwC,GAAxC,GAA8CsC,CAAC,CAACoC,QAAF,EAA9C,GAA6D,GAA7D,GAAmEpC,CAAC,CAACuC,aAAF,EAAnE,GAAuF,GAAvF,GAA6FvC,CAAC,CAAC0C,YAAF,EAA7F,GAAgH,GAAhH,GAAsH1C,CAAC,CAAC2C,UAAF,EAAtH,GAAuI,GAAvI,GAA6I3C,CAAC,CAAC4C,UAAF,EAApJ;AACD;AA3hC2B,CAA9B;AA8hCA,IAAIC,sBAAsB,GAAGtJ,iBAAiB,CAACgE,SAA/C;AAEApE,KAAK,CAAC2J,IAAN,CAAW7H,MAAX,EAAmB,UAAU8H,CAAV,EAAaC,KAAb,EAAoB;AACrC,MAAID,CAAJ,EAAO;AACLF,IAAAA,sBAAsB,CAAC,QAAQE,CAAT,CAAtB,GAAoC,SAAS9E,GAAT,GAAe;AACjD,aAAO,KAAKA,GAAL,CAAS+E,KAAT,CAAP;AACD,KAFD;;AAIAH,IAAAA,sBAAsB,CAAC,UAAUE,CAAX,CAAtB,GAAsC,SAASxE,KAAT,GAAiB;AACrD,aAAO,KAAKA,KAAL,CAAWyE,KAAX,CAAP;AACD,KAFD;;AAIAH,IAAAA,sBAAsB,CAAC,QAAQE,CAAT,CAAtB,GAAoC,SAASjG,GAAT,CAAakD,CAAb,EAAgB;AAClD,aAAO,KAAKlD,GAAL,CAASkG,KAAT,EAAgBhD,CAAhB,CAAP;AACD,KAFD;;AAIA6C,IAAAA,sBAAsB,CAAC,QAAQE,CAAT,CAAtB,GAAoC,SAAS1C,GAAT,CAAaL,CAAb,EAAgB;AAClD,aAAO,KAAKK,GAAL,CAAS2C,KAAT,EAAgBhD,CAAhB,CAAP;AACD,KAFD;;AAIA6C,IAAAA,sBAAsB,CAAC,SAASE,CAAV,CAAtB,GAAqC,SAASjC,IAAT,CAAcd,CAAd,EAAiB;AACpD,aAAO,KAAKc,IAAL,CAAUkC,KAAV,EAAiBhD,CAAjB,CAAP;AACD,KAFD;;AAIA6C,IAAAA,sBAAsB,CAAC,YAAYE,CAAb,CAAtB,GAAwC,SAAS/B,OAAT,CAAiBhB,CAAjB,EAAoB;AAC1D,aAAO,KAAKgB,OAAL,CAAagC,KAAb,EAAoBhD,CAApB,CAAP;AACD,KAFD;AAGD;AACF,CA1BD;AA4BAiD,MAAM,CAACC,OAAP,GAAiB3J,iBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*\n * GregorianCalendar class\n * @ignore\n * @author yiminghe@gmail.com\n */\n'use strict';\n\nvar toInt = parseInt;\nvar Utils = require('./utils');\nvar defaultLocale = require('./locale/en_US');\nvar Const = require('./const');\n\n/*\n * GregorianCalendar class.\n *\n * - no arguments:\n *   Constructs a default GregorianCalendar using the current time\n *   in the default time zone with the default locale.\n * - one argument locale:\n *   Constructs a GregorianCalendar\n *   based on the current time in the default time zone with the given locale.\n *\n * @class Date.Gregorian\n */\nfunction GregorianCalendar(loc) {\n  var locale = loc || defaultLocale;\n\n  this.locale = locale;\n\n  this.fields = [];\n\n  /*\n   * The currently set time for this date.\n   * @protected\n   * @type Number|undefined\n   */\n  this.time = undefined;\n  /*\n   * The timezoneOffset in minutes used by this date.\n   * @type Number\n   * @protected\n   */\n\n  this.timezoneOffset = locale.timezoneOffset;\n\n  /*\n   * The first day of the week\n   * @type Number\n   * @protected\n   */\n  this.firstDayOfWeek = locale.firstDayOfWeek;\n\n  /*\n   * The number of days required for the first week in a month or year,\n   * with possible values from 1 to 7.\n   * @@protected\n   * @type Number\n   */\n  this.minimalDaysInFirstWeek = locale.minimalDaysInFirstWeek;\n\n  this.fieldsComputed = false;\n}\n\nUtils.mix(GregorianCalendar, Const);\n\nUtils.mix(GregorianCalendar, {\n  Utils: Utils,\n\n  defaultLocale: defaultLocale,\n\n  /*\n   * Determines if the given year is a leap year.\n   * Returns true if the given year is a leap year. To specify BC year numbers,\n   * 1 - year number must be given. For example, year BC 4 is specified as -3.\n   * @param {Number} year the given year.\n   * @returns {Boolean} true if the given year is a leap year; false otherwise.\n   * @static\n   * @method\n   */\n  isLeapYear: Utils.isLeapYear,\n\n  /*\n   * Enum indicating year field of date\n   * @type Number\n   */\n  YEAR: 1,\n  /*\n   * Enum indicating month field of date\n   * @type Number\n   */\n  MONTH: 2,\n  /*\n   * Enum indicating the day of the month\n   * @type Number\n   */\n  DAY_OF_MONTH: 3,\n  /*\n   * Enum indicating the hour (24).\n   * @type Number\n   */\n  HOUR_OF_DAY: 4,\n  /*\n   * Enum indicating the minute of the day\n   * @type Number\n   */\n  MINUTES: 5,\n  /*\n   * Enum indicating the second of the day\n   * @type Number\n   */\n  SECONDS: 6,\n  /*\n   * Enum indicating the millisecond of the day\n   * @type Number\n   */\n  MILLISECONDS: 7,\n  /*\n   * Enum indicating the week number within the current year\n   * @type Number\n   */\n  WEEK_OF_YEAR: 8,\n  /*\n   * Enum indicating the week number within the current month\n   * @type Number\n   */\n  WEEK_OF_MONTH: 9,\n\n  /*\n   * Enum indicating the day of the day number within the current year\n   * @type Number\n   */\n  DAY_OF_YEAR: 10,\n  /*\n   * Enum indicating the day of the week\n   * @type Number\n   */\n  DAY_OF_WEEK: 11,\n  /*\n   * Enum indicating the day of the ordinal number of the day of the week\n   * @type Number\n   */\n  DAY_OF_WEEK_IN_MONTH: 12,\n\n  /*\n   * Enum indicating am\n   * @type Number\n   */\n  AM: 0,\n  /*\n   * Enum indicating pm\n   * @type Number\n   */\n  PM: 1\n});\n\nvar FIELDS = ['', 'Year', 'Month', 'DayOfMonth', 'HourOfDay', 'Minutes', 'Seconds', 'Milliseconds', 'WeekOfYear', 'WeekOfMonth', 'DayOfYear', 'DayOfWeek', 'DayOfWeekInMonth'];\n\nvar YEAR = GregorianCalendar.YEAR;\nvar MONTH = GregorianCalendar.MONTH;\nvar DAY_OF_MONTH = GregorianCalendar.DAY_OF_MONTH;\nvar HOUR_OF_DAY = GregorianCalendar.HOUR_OF_DAY;\nvar MINUTE = GregorianCalendar.MINUTES;\nvar SECONDS = GregorianCalendar.SECONDS;\n\nvar MILLISECONDS = GregorianCalendar.MILLISECONDS;\nvar DAY_OF_WEEK_IN_MONTH = GregorianCalendar.DAY_OF_WEEK_IN_MONTH;\nvar DAY_OF_YEAR = GregorianCalendar.DAY_OF_YEAR;\nvar DAY_OF_WEEK = GregorianCalendar.DAY_OF_WEEK;\n\nvar WEEK_OF_MONTH = GregorianCalendar.WEEK_OF_MONTH;\nvar WEEK_OF_YEAR = GregorianCalendar.WEEK_OF_YEAR;\n\nvar MONTH_LENGTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based\nvar LEAP_MONTH_LENGTH = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based\n\nvar ONE_SECOND = 1000;\nvar ONE_MINUTE = 60 * ONE_SECOND;\nvar ONE_HOUR = 60 * ONE_MINUTE;\nvar ONE_DAY = 24 * ONE_HOUR;\nvar ONE_WEEK = ONE_DAY * 7;\n\nvar EPOCH_OFFSET = 719163; // Fixed date of January 1, 1970 (Gregorian)\n\nvar mod = Utils.mod;\nvar _isLeapYear = Utils.isLeapYear;\nvar floorDivide = Math.floor;\n\nvar MIN_VALUES = [undefined, 1, // YEAR\nGregorianCalendar.JANUARY, // MONTH\n1, // DAY_OF_MONTH\n0, // HOUR_OF_DAY\n0, // MINUTE\n0, // SECONDS\n0, // MILLISECONDS\n\n1, // WEEK_OF_YEAR\nundefined, // WEEK_OF_MONTH\n\n1, // DAY_OF_YEAR\nGregorianCalendar.SUNDAY, // DAY_OF_WEEK\n1];\n\n// DAY_OF_WEEK_IN_MONTH\nvar MAX_VALUES = [undefined, 292278994, // YEAR\nGregorianCalendar.DECEMBER, // MONTH\nundefined, // DAY_OF_MONTH\n23, // HOUR_OF_DAY\n59, // MINUTE\n59, // SECONDS\n999, // MILLISECONDS\nundefined, // WEEK_OF_YEAR\nundefined, // WEEK_OF_MONTH\nundefined, // DAY_OF_YEAR\nGregorianCalendar.SATURDAY, // DAY_OF_WEEK\nundefined];\n\n// ------------------- private start\n\n// DAY_OF_WEEK_IN_MONTH\nfunction getMonthLength(year, month) {\n  return _isLeapYear(year) ? LEAP_MONTH_LENGTH[month] : MONTH_LENGTH[month];\n}\n\nfunction getYearLength(year) {\n  return _isLeapYear(year) ? 366 : 365;\n}\n\nfunction adjustDayOfMonth(self) {\n  var fields = self.fields;\n  var year = fields[YEAR];\n  var month = fields[MONTH];\n  var monthLen = getMonthLength(year, month);\n  var dayOfMonth = fields[DAY_OF_MONTH];\n  if (dayOfMonth > monthLen) {\n    self.set(DAY_OF_MONTH, monthLen);\n  }\n}\n\nfunction getDayOfWeekDateOnOrBefore(fixedDate, dayOfWeek) {\n  // 1.1.1 is monday\n  // one week has 7 days\n  return fixedDate - mod(fixedDate - dayOfWeek, 7);\n}\n\nfunction getWeekNumber(self, fixedDay1, fixedDate) {\n  var fixedDay1st = getDayOfWeekDateOnOrBefore(fixedDay1 + 6, self.firstDayOfWeek);\n  var nDays = fixedDay1st - fixedDay1;\n  if (nDays >= self.minimalDaysInFirstWeek) {\n    fixedDay1st -= 7;\n  }\n  var normalizedDayOfPeriod = fixedDate - fixedDay1st;\n  return floorDivide(normalizedDayOfPeriod / 7) + 1;\n}\n\n// ------------------- private end\n\nGregorianCalendar.prototype = {\n  constructor: GregorianCalendar,\n\n  isGregorianCalendar: 1,\n\n  /*\n   * Determines if current year is a leap year.\n   * Returns true if the given year is a leap year. To specify BC year numbers,\n   * 1 - year number must be given. For example, year BC 4 is specified as -3.\n   * @returns {Boolean} true if the given year is a leap year; false otherwise.\n   * @method\n   * @member Date.Gregorian\n   */\n  isLeapYear: function isLeapYear() {\n    return _isLeapYear(this.getYear());\n  },\n\n  /*\n   * Return local info for current date instance\n   * @returns {Object}\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  },\n\n  /*\n   * Returns the minimum value for\n   * the given calendar field of this GregorianCalendar instance.\n   * The minimum value is defined as the smallest value\n   * returned by the get method for any possible time value,\n   * taking into consideration the current values of the getFirstDayOfWeek,\n   * getMinimalDaysInFirstWeek.\n   * @param field the calendar field.\n   * @returns {Number} the minimum value for the given calendar field.\n   */\n  getActualMinimum: function getActualMinimum(field) {\n    if (MIN_VALUES[field] !== undefined) {\n      return MIN_VALUES[field];\n    }\n    if (field === WEEK_OF_MONTH) {\n      var cal = this.clone();\n      cal.clear();\n      cal.set(this.fields[YEAR], this.fields[MONTH], 1);\n      return cal.get(WEEK_OF_MONTH);\n    }\n\n    throw new Error('minimum value not defined!');\n  },\n\n  /*\n   * Returns the maximum value for the given calendar field\n   * of this GregorianCalendar instance.\n   * The maximum value is defined as the largest value returned\n   * by the get method for any possible time value, taking into consideration\n   * the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek methods.\n   * @param field the calendar field.\n   * @returns {Number} the maximum value for the given calendar field.\n   */\n  getActualMaximum: function getActualMaximum(field) {\n    if (MAX_VALUES[field] !== undefined) {\n      return MAX_VALUES[field];\n    }\n    var value = undefined;\n    var fields = this.fields;\n    switch (field) {\n      case DAY_OF_MONTH:\n        value = getMonthLength(fields[YEAR], fields[MONTH]);\n        break;\n\n      case WEEK_OF_YEAR:\n        var endOfYear = this.clone();\n        endOfYear.clear();\n        endOfYear.set(fields[YEAR], GregorianCalendar.DECEMBER, 31);\n        value = endOfYear.get(WEEK_OF_YEAR);\n        if (value === 1) {\n          value = 52;\n        }\n        break;\n\n      case WEEK_OF_MONTH:\n        var endOfMonth = this.clone();\n        endOfMonth.clear();\n        endOfMonth.set(fields[YEAR], fields[MONTH], getMonthLength(fields[YEAR], fields[MONTH]));\n        value = endOfMonth.get(WEEK_OF_MONTH);\n        break;\n\n      case DAY_OF_YEAR:\n        value = getYearLength(fields[YEAR]);\n        break;\n\n      case DAY_OF_WEEK_IN_MONTH:\n        value = toInt((getMonthLength(fields[YEAR], fields[MONTH]) - 1) / 7) + 1;\n        break;\n      default:\n        break;\n    }\n    if (value === undefined) {\n      throw new Error('maximum value not defined!');\n    }\n    return value;\n  },\n\n  /*\n   * Determines if the given calendar field has a value set,\n   * including cases that the value has been set by internal fields calculations\n   * triggered by a get method call.\n   * @param field the calendar field to be cleared.\n   * @returns {boolean} true if the given calendar field has a value set; false otherwise.\n   */\n  isSet: function isSet(field) {\n    return this.fields[field] !== undefined;\n  },\n\n  /*\n   * Converts the time value (millisecond offset from the Epoch)\n   * to calendar field values.\n   * @protected\n   */\n  computeFields: function computeFields() {\n    var time = this.time;\n    var timezoneOffset = this.timezoneOffset * ONE_MINUTE;\n    var fixedDate = toInt(timezoneOffset / ONE_DAY);\n    var timeOfDay = timezoneOffset % ONE_DAY;\n    fixedDate += toInt(time / ONE_DAY);\n    timeOfDay += time % ONE_DAY;\n    if (timeOfDay >= ONE_DAY) {\n      timeOfDay -= ONE_DAY;\n      fixedDate++;\n    } else {\n      while (timeOfDay < 0) {\n        timeOfDay += ONE_DAY;\n        fixedDate--;\n      }\n    }\n\n    fixedDate += EPOCH_OFFSET;\n\n    var date = Utils.getGregorianDateFromFixedDate(fixedDate);\n\n    var year = date.year;\n\n    var fields = this.fields;\n    fields[YEAR] = year;\n    fields[MONTH] = date.month;\n    fields[DAY_OF_MONTH] = date.dayOfMonth;\n    fields[DAY_OF_WEEK] = date.dayOfWeek;\n\n    if (timeOfDay !== 0) {\n      fields[HOUR_OF_DAY] = toInt(timeOfDay / ONE_HOUR);\n      var r = timeOfDay % ONE_HOUR;\n      fields[MINUTE] = toInt(r / ONE_MINUTE);\n      r %= ONE_MINUTE;\n      fields[SECONDS] = toInt(r / ONE_SECOND);\n      fields[MILLISECONDS] = r % ONE_SECOND;\n    } else {\n      fields[HOUR_OF_DAY] = fields[MINUTE] = fields[SECONDS] = fields[MILLISECONDS] = 0;\n    }\n\n    var fixedDateJan1 = Utils.getFixedDate(year, GregorianCalendar.JANUARY, 1);\n    var dayOfYear = fixedDate - fixedDateJan1 + 1;\n    var fixDateMonth1 = fixedDate - date.dayOfMonth + 1;\n\n    fields[DAY_OF_YEAR] = dayOfYear;\n    fields[DAY_OF_WEEK_IN_MONTH] = toInt((date.dayOfMonth - 1) / 7) + 1;\n\n    var weekOfYear = getWeekNumber(this, fixedDateJan1, fixedDate);\n\n    // 本周没有足够的时间在当前年\n    if (weekOfYear === 0) {\n      // If the date belongs to the last week of the\n      // previous year, use the week number of \"12/31\" of\n      // the \"previous\" year.\n      var fixedDec31 = fixedDateJan1 - 1;\n      var prevJan1 = fixedDateJan1 - getYearLength(year - 1);\n      weekOfYear = getWeekNumber(this, prevJan1, fixedDec31);\n    } else\n      // 本周是年末最后一周，可能有足够的时间在新的一年\n      if (weekOfYear >= 52) {\n        var nextJan1 = fixedDateJan1 + getYearLength(year);\n        var nextJan1st = getDayOfWeekDateOnOrBefore(nextJan1 + 6, this.firstDayOfWeek);\n        var nDays = nextJan1st - nextJan1;\n        // 本周有足够天数在新的一年\n        if (nDays >= this.minimalDaysInFirstWeek &&\n        // 当天确实在本周，weekOfYear === 53 时是不需要这个判断\n        fixedDate >= nextJan1st - 7) {\n          weekOfYear = 1;\n        }\n      }\n\n    fields[WEEK_OF_YEAR] = weekOfYear;\n    fields[WEEK_OF_MONTH] = getWeekNumber(this, fixDateMonth1, fixedDate);\n\n    this.fieldsComputed = true;\n  },\n\n  /*\n   * Converts calendar field values to the time value\n   * (millisecond offset from the Epoch).\n   * @protected\n   */\n  computeTime: function computeTime() {\n    var year = undefined;\n    var fields = this.fields;\n    if (this.isSet(YEAR)) {\n      year = fields[YEAR];\n    } else {\n      year = new Date().getFullYear();\n    }\n    var timeOfDay = 0;\n    if (this.isSet(HOUR_OF_DAY)) {\n      timeOfDay += fields[HOUR_OF_DAY];\n    }\n    timeOfDay *= 60;\n    timeOfDay += fields[MINUTE] || 0;\n    timeOfDay *= 60;\n    timeOfDay += fields[SECONDS] || 0;\n    timeOfDay *= 1000;\n    timeOfDay += fields[MILLISECONDS] || 0;\n    var fixedDate = 0;\n    fields[YEAR] = year;\n    fixedDate = fixedDate + this.getFixedDate();\n    // millis represents local wall-clock time in milliseconds.\n    var millis = (fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;\n    millis -= this.timezoneOffset * ONE_MINUTE;\n    this.time = millis;\n    this.computeFields();\n  },\n\n  /*\n   * Fills in any unset fields in the calendar fields. First,\n   * the computeTime() method is called if the time value (millisecond offset from the Epoch)\n   * has not been calculated from calendar field values.\n   * Then, the computeFields() method is called to calculate all calendar field values.\n   * @protected\n   */\n  complete: function complete() {\n    if (this.time === undefined) {\n      this.computeTime();\n    }\n    if (!this.fieldsComputed) {\n      this.computeFields();\n    }\n  },\n\n  getFixedDate: function getFixedDate() {\n    var self = this;\n\n    var fields = self.fields;\n\n    var firstDayOfWeekCfg = self.firstDayOfWeek;\n\n    var year = fields[YEAR];\n\n    var month = GregorianCalendar.JANUARY;\n\n    if (self.isSet(MONTH)) {\n      month = fields[MONTH];\n      if (month > GregorianCalendar.DECEMBER) {\n        year += toInt(month / 12);\n        month %= 12;\n      } else if (month < GregorianCalendar.JANUARY) {\n        year += floorDivide(month / 12);\n        month = mod(month, 12);\n      }\n    }\n\n    // Get the fixed date since Jan 1, 1 (Gregorian). We are on\n    // the first day of either `month' or January in 'year'.\n    var fixedDate = Utils.getFixedDate(year, month, 1);\n    var firstDayOfWeek = undefined;\n    var dayOfWeek = self.firstDayOfWeek;\n\n    if (self.isSet(DAY_OF_WEEK)) {\n      dayOfWeek = fields[DAY_OF_WEEK];\n    }\n\n    if (self.isSet(MONTH)) {\n      if (self.isSet(DAY_OF_MONTH)) {\n        fixedDate += fields[DAY_OF_MONTH] - 1;\n      } else {\n        if (self.isSet(WEEK_OF_MONTH)) {\n          firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg);\n\n          // If we have enough days in the first week, then\n          // move to the previous week.\n          if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {\n            firstDayOfWeek -= 7;\n          }\n\n          if (dayOfWeek !== firstDayOfWeekCfg) {\n            firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);\n          }\n\n          fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_MONTH] - 1);\n        } else {\n          var dowim = undefined;\n          if (self.isSet(DAY_OF_WEEK_IN_MONTH)) {\n            dowim = fields[DAY_OF_WEEK_IN_MONTH];\n          } else {\n            dowim = 1;\n          }\n          var lastDate = 7 * dowim;\n          if (dowim < 0) {\n            lastDate = getMonthLength(year, month) + 7 * (dowim + 1);\n          }\n          fixedDate = getDayOfWeekDateOnOrBefore(fixedDate + lastDate - 1, dayOfWeek);\n        }\n      }\n    } else {\n      // We are on the first day of the year.\n      if (self.isSet(DAY_OF_YEAR)) {\n        fixedDate += fields[DAY_OF_YEAR] - 1;\n      } else if (self.isSet(WEEK_OF_YEAR)) {\n        firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg);\n        // If we have enough days in the first week, then move\n        // to the previous week.\n        if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {\n          firstDayOfWeek -= 7;\n        }\n        if (dayOfWeek !== firstDayOfWeekCfg) {\n          firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);\n        }\n        fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_YEAR] - 1);\n      }\n    }\n\n    return fixedDate;\n  },\n\n  /*\n   * Returns this Calendar's time value in milliseconds\n   * @member Date.Gregorian\n   * @returns {Number} the current time as UTC milliseconds from the epoch.\n   */\n  getTime: function getTime() {\n    if (this.time === undefined) {\n      this.computeTime();\n    }\n    return this.time;\n  },\n\n  /*\n   * Sets this Calendar's current time from the given long value.\n   * @param time the new time in UTC milliseconds from the epoch.\n   */\n  setTime: function setTime(time) {\n    this.time = time;\n    this.fieldsComputed = false;\n    this.complete();\n  },\n\n  /*\n   * Returns the value of the given calendar field.\n   * @param field the given calendar field.\n   * @returns {Number} the value for the given calendar field.\n   */\n  get: function get(field) {\n    this.complete();\n    return this.fields[field];\n  },\n\n  /*\n   * Returns the year of the given calendar field.\n   * @method getYear\n   * @returns {Number} the year for the given calendar field.\n   */\n\n  /*\n   * Returns the month of the given calendar field.\n   * @method getMonth\n   * @returns {Number} the month for the given calendar field.\n   */\n\n  /*\n   * Returns the day of month of the given calendar field.\n   * @method getDayOfMonth\n   * @returns {Number} the day of month for the given calendar field.\n   */\n\n  /*\n   * Returns the hour of day of the given calendar field.\n   * @method getHourOfDay\n   * @returns {Number} the hour of day for the given calendar field.\n   */\n\n  /*\n   * Returns the minute of the given calendar field.\n   * @method getMinute\n   * @returns {Number} the minute for the given calendar field.\n   */\n\n  /*\n   * Returns the second of the given calendar field.\n   * @method getSecond\n   * @returns {Number} the second for the given calendar field.\n   */\n\n  /*\n   * Returns the millisecond of the given calendar field.\n   * @method getMilliSecond\n   * @returns {Number} the millisecond for the given calendar field.\n   */\n\n  /*\n   * Returns the week of year of the given calendar field.\n   * @method getWeekOfYear\n   * @returns {Number} the week of year for the given calendar field.\n   */\n\n  /*\n   * Returns the week of month of the given calendar field.\n   * @method getWeekOfMonth\n   * @returns {Number} the week of month for the given calendar field.\n   */\n\n  /*\n   * Returns the day of year of the given calendar field.\n   * @method getDayOfYear\n   * @returns {Number} the day of year for the given calendar field.\n   */\n\n  /*\n   * Returns the day of week of the given calendar field.\n   * @method getDayOfWeek\n   * @returns {Number} the day of week for the given calendar field.\n   */\n\n  /*\n   * Returns the day of week in month of the given calendar field.\n   * @method getDayOfWeekInMonth\n   * @returns {Number} the day of week in month for the given calendar field.\n   */\n\n  /*\n   * Sets the given calendar field to the given value.\n   * @param field the given calendar field.\n   * @param v the value to be set for the given calendar field.\n   */\n  set: function set(field, v) {\n    var len = arguments.length;\n    if (len === 2) {\n      this.fields[field] = v;\n    } else if (len < MILLISECONDS + 1) {\n      for (var i = 0; i < len; i++) {\n        this.fields[YEAR + i] = arguments[i];\n      }\n    } else {\n      throw new Error('illegal arguments for GregorianCalendar set');\n    }\n    this.time = undefined;\n  },\n\n  /*\n   * Set the year of the given calendar field.\n   * @method setYear\n   */\n\n  /*\n   * Set the month of the given calendar field.\n   * @method setMonth\n   */\n\n  /*\n   * Set the day of month of the given calendar field.\n   * @method setDayOfMonth\n   */\n\n  /*\n   * Set the hour of day of the given calendar field.\n   * @method setHourOfDay\n   */\n\n  /*\n   * Set the minute of the given calendar field.\n   * @method setMinute\n   */\n\n  /*\n   * Set the second of the given calendar field.\n   * @method setSecond\n   */\n\n  /*\n   * Set the millisecond of the given calendar field.\n   * @method setMilliSecond\n   */\n\n  /*\n   * Set the week of year of the given calendar field.\n   * @method setWeekOfYear\n   */\n\n  /*\n   * Set the week of month of the given calendar field.\n   * @method setWeekOfMonth\n   */\n\n  /*\n   * Set the day of year of the given calendar field.\n   * @method setDayOfYear\n   */\n\n  /*\n   * Set the day of week of the given calendar field.\n   * @method setDayOfWeek\n   */\n\n  /*\n   * Set the day of week in month of the given calendar field.\n   * @method setDayOfWeekInMonth\n   */\n\n  /*\n   * add for specified field based on two rules:\n   *\n   *  - Add rule 1. The value of field after the call minus the value of field before the\n   *  call is amount, modulo any overflow that has occurred in field\n   *  Overflow occurs when a field value exceeds its range and,\n   *  as a result, the next larger field is incremented or\n   *  decremented and the field value is adjusted back into its range.\n   *\n   *  - Add rule 2. If a smaller field is expected to be invariant,\n   *  but it is impossible for it to be equal to its\n   *  prior value because of changes in its minimum or maximum after\n   *  field is changed, then its value is adjusted to be as close\n   *  as possible to its expected value. A smaller field represents a\n   *  smaller unit of time. HOUR_OF_DAY is a smaller field than\n   *  DAY_OF_MONTH. No adjustment is made to smaller fields\n   *  that are not expected to be invariant. The calendar system\n   *  determines what fields are expected to be invariant.\n   *\n   *\n   *      @example\n   *      use('date/gregorian',function(S, GregorianCalendar){\n   *          const d = new GregorianCalendar();\n   *          d.set(2012, GregorianCalendar.JANUARY, 31);\n   *          d.add(Gregorian.MONTH,1);\n   *          // 2012-2-29\n   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())\n   *          d.add(Gregorian.MONTH,12);\n   *          // 2013-2-28\n   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())\n   *      });\n   *\n   * @param field the calendar field.\n   * @param {Number} amount he amount of date or time to be added to the field.\n   */\n  add: function add(field, a) {\n    if (!a) {\n      return;\n    }\n    var amount = a;\n    var self = this;\n    var fields = self.fields;\n    // computer and retrieve original value\n    var value = self.get(field);\n    if (field === YEAR) {\n      value += amount;\n      self.set(YEAR, value);\n      adjustDayOfMonth(self);\n    } else if (field === MONTH) {\n      value += amount;\n      var yearAmount = floorDivide(value / 12);\n      value = mod(value, 12);\n      if (yearAmount) {\n        self.set(YEAR, fields[YEAR] + yearAmount);\n      }\n      self.set(MONTH, value);\n      adjustDayOfMonth(self);\n    } else {\n      switch (field) {\n        case HOUR_OF_DAY:\n          amount *= ONE_HOUR;\n          break;\n        case MINUTE:\n          amount *= ONE_MINUTE;\n          break;\n        case SECONDS:\n          amount *= ONE_SECOND;\n          break;\n        case MILLISECONDS:\n          break;\n        case WEEK_OF_MONTH:\n        case WEEK_OF_YEAR:\n        case DAY_OF_WEEK_IN_MONTH:\n          amount *= ONE_WEEK;\n          break;\n        case DAY_OF_WEEK:\n        case DAY_OF_YEAR:\n        case DAY_OF_MONTH:\n          amount *= ONE_DAY;\n          break;\n        default:\n          throw new Error('illegal field for add');\n      }\n      self.setTime(self.time + amount);\n    }\n  },\n\n  /*\n   * add the year of the given calendar field.\n   * @method addYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the month of the given calendar field.\n   * @method addMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of month of the given calendar field.\n   * @method addDayOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the hour of day of the given calendar field.\n   * @method addHourOfDay\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the minute of the given calendar field.\n   * @method addMinute\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the second of the given calendar field.\n   * @method addSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the millisecond of the given calendar field.\n   * @method addMilliSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the week of year of the given calendar field.\n   * @method addWeekOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the week of month of the given calendar field.\n   * @method addWeekOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of year of the given calendar field.\n   * @method addDayOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of week of the given calendar field.\n   * @method addDayOfWeek\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * add the day of week in month of the given calendar field.\n   * @method addDayOfWeekInMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * Get rolled value for the field\n   * @protected\n   */\n  getRolledValue: function getRolledValue(value, a, min, max) {\n    var amount = a;\n    var diff = value - min;\n    var range = max - min + 1;\n    amount %= range;\n    return min + (diff + amount + range) % range;\n  },\n\n  /*\n   * Adds a signed amount to the specified calendar field without changing larger fields.\n   * A negative roll amount means to subtract from field without changing\n   * larger fields. If the specified amount is 0, this method performs nothing.\n   *\n   *\n   *\n   *      @example\n   *      const d = new GregorianCalendar();\n   *      d.set(1999, GregorianCalendar.AUGUST, 31);\n   *      // 1999-4-30\n   *      // Tuesday June 1, 1999\n   *      d.set(1999, GregorianCalendar.JUNE, 1);\n   *      d.add(Gregorian.WEEK_OF_MONTH,-1); // === d.add(Gregorian.WEEK_OF_MONTH,\n   *      d.get(Gregorian.WEEK_OF_MONTH));\n   *      // 1999-06-29\n   *\n   *\n   * @param field the calendar field.\n   * @param {Number} amount the signed amount to add to field.\n   */\n  roll: function roll(field, amount) {\n    if (!amount) {\n      return;\n    }\n    var self = this;\n    // computer and retrieve original value\n    var value = self.get(field);\n    var min = self.getActualMinimum(field);\n    var max = self.getActualMaximum(field);\n    value = self.getRolledValue(value, amount, min, max);\n\n    self.set(field, value);\n\n    // consider compute time priority\n    switch (field) {\n      case MONTH:\n        adjustDayOfMonth(self);\n        break;\n      default:\n        // other fields are set already when get\n        self.updateFieldsBySet(field);\n        break;\n    }\n  },\n\n  /*\n   * keep field stable.\n   *\n   * 2015-09-29 setMonth 2 vs rollSetMonth 2\n   *\n   */\n  rollSet: function rollSet(field, v) {\n    this.set(field, v);\n    switch (field) {\n      case MONTH:\n        adjustDayOfMonth(this);\n        break;\n      default:\n        // other fields are set already when get\n        this.updateFieldsBySet(field);\n        break;\n    }\n  },\n\n  /*\n   * roll the year of the given calendar field.\n   * @method rollYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the month of the given calendar field.\n   * @param {Number} amount the signed amount to add to field.\n   * @method rollMonth\n   */\n\n  /*\n   * roll the day of month of the given calendar field.\n   * @method rollDayOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the hour of day of the given calendar field.\n   * @method rollHourOfDay\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the minute of the given calendar field.\n   * @method rollMinute\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the second of the given calendar field.\n   * @method rollSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the millisecond of the given calendar field.\n   * @method rollMilliSecond\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the week of year of the given calendar field.\n   * @method rollWeekOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the week of month of the given calendar field.\n   * @method rollWeekOfMonth\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the day of year of the given calendar field.\n   * @method rollDayOfYear\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * roll the day of week of the given calendar field.\n   * @method rollDayOfWeek\n   * @param {Number} amount the signed amount to add to field.\n   */\n\n  /*\n   * remove other priority fields when call getFixedDate\n   * precondition: other fields are all set or computed\n   * @protected\n   */\n  updateFieldsBySet: function updateFieldsBySet(field) {\n    var fields = this.fields;\n    switch (field) {\n      case WEEK_OF_MONTH:\n        fields[DAY_OF_MONTH] = undefined;\n        break;\n      case DAY_OF_YEAR:\n        fields[MONTH] = undefined;\n        break;\n      case DAY_OF_WEEK:\n        fields[DAY_OF_MONTH] = undefined;\n        break;\n      case WEEK_OF_YEAR:\n        fields[DAY_OF_YEAR] = undefined;\n        fields[MONTH] = undefined;\n        break;\n      default:\n        break;\n    }\n  },\n\n  /*\n   * get current date instance's timezone offset\n   * @returns {Number}\n   */\n  getTimezoneOffset: function getTimezoneOffset() {\n    return this.timezoneOffset;\n  },\n\n  /*\n   * set current date instance's timezone offset\n   */\n  setTimezoneOffset: function setTimezoneOffset(timezoneOffset) {\n    if (this.timezoneOffset !== timezoneOffset) {\n      this.fieldsComputed = undefined;\n      this.timezoneOffset = timezoneOffset;\n    }\n  },\n\n  /*\n   * set first day of week for current date instance\n   */\n  setFirstDayOfWeek: function setFirstDayOfWeek(firstDayOfWeek) {\n    if (this.firstDayOfWeek !== firstDayOfWeek) {\n      this.firstDayOfWeek = firstDayOfWeek;\n      this.fieldsComputed = false;\n    }\n  },\n\n  /*\n   * Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.\n   * @returns {Number} the first day of the week.\n   */\n  getFirstDayOfWeek: function getFirstDayOfWeek() {\n    return this.firstDayOfWeek;\n  },\n\n  /*\n   * Sets what the minimal days required in the first week of the year are; For example,\n   * if the first week is defined as one that contains the first day of the first month of a year,\n   * call this method with value 1.\n   * If it must be a full week, use value 7.\n   * @param minimalDaysInFirstWeek the given minimal days required in the first week of the year.\n   */\n  setMinimalDaysInFirstWeek: function setMinimalDaysInFirstWeek(minimalDaysInFirstWeek) {\n    if (this.minimalDaysInFirstWeek !== minimalDaysInFirstWeek) {\n      this.minimalDaysInFirstWeek = minimalDaysInFirstWeek;\n      this.fieldsComputed = false;\n    }\n  },\n\n  /*\n   * Gets what the minimal days required in the first week of the year are; e.g.,\n   * if the first week is defined as one that contains the first day of the first month of a year,\n   * this method returns 1.\n   * If the minimal days required must be a full week, this method returns 7.\n   * @returns {Number} the minimal days required in the first week of the year.\n   */\n  getMinimalDaysInFirstWeek: function getMinimalDaysInFirstWeek() {\n    return this.minimalDaysInFirstWeek;\n  },\n\n  /*\n   * Returns the number of weeks in the week year\n   * represented by this GregorianCalendar.\n   *\n   * For example, if this GregorianCalendar's date is\n   * December 31, 2008 with the ISO\n   * 8601 compatible setting, this method will return 53 for the\n   * period: December 29, 2008 to January 3, 2010\n   * while getActualMaximum(WEEK_OF_YEAR) will return\n   * 52 for the period: December 31, 2007 to December 28, 2008.\n   *\n   * @return {Number} the number of weeks in the week year.\n   */\n  getWeeksInWeekYear: function getWeeksInWeekYear() {\n    var weekYear = this.getWeekYear();\n    if (weekYear === this.get(YEAR)) {\n      return this.getActualMaximum(WEEK_OF_YEAR);\n    }\n    // Use the 2nd week for calculating the max of WEEK_OF_YEAR\n    var gc = this.clone();\n    gc.clear();\n    gc.setWeekDate(weekYear, 2, this.get(DAY_OF_WEEK));\n    return gc.getActualMaximum(WEEK_OF_YEAR);\n  },\n\n  /*\n   * Returns the week year represented by this GregorianCalendar.\n   * The dates in the weeks between 1 and the\n   * maximum week number of the week year have the same week year value\n   * that may be one year before or after the calendar year value.\n   *\n   * @return {Number} the week year represented by this GregorianCalendar.\n   */\n  getWeekYear: function getWeekYear() {\n    var year = this.get(YEAR); // implicitly  complete\n    var weekOfYear = this.get(WEEK_OF_YEAR);\n    var month = this.get(MONTH);\n    if (month === GregorianCalendar.JANUARY) {\n      if (weekOfYear >= 52) {\n        --year;\n      }\n    } else if (month === GregorianCalendar.DECEMBER) {\n      if (weekOfYear === 1) {\n        ++year;\n      }\n    }\n    return year;\n  },\n  /*\n   * Sets this GregorianCalendar to the date given by the date specifiers - weekYear,\n   * weekOfYear, and dayOfWeek. weekOfYear follows the WEEK_OF_YEAR numbering.\n   * The dayOfWeek value must be one of the DAY_OF_WEEK values: SUNDAY to SATURDAY.\n   *\n   * @param weekYear    the week year\n   * @param weekOfYear  the week number based on weekYear\n   * @param dayOfWeek   the day of week value\n   */\n  setWeekDate: function setWeekDate(weekYear, weekOfYear, dayOfWeek) {\n    if (dayOfWeek < GregorianCalendar.SUNDAY || dayOfWeek > GregorianCalendar.SATURDAY) {\n      throw new Error('invalid dayOfWeek: ' + dayOfWeek);\n    }\n    var fields = this.fields;\n    // To avoid changing the time of day fields by date\n    // calculations, use a clone with the GMT time zone.\n    var gc = this.clone();\n    gc.clear();\n    gc.setTimezoneOffset(0);\n    gc.set(YEAR, weekYear);\n    gc.set(WEEK_OF_YEAR, 1);\n    gc.set(DAY_OF_WEEK, this.getFirstDayOfWeek());\n    var days = dayOfWeek - this.getFirstDayOfWeek();\n    if (days < 0) {\n      days += 7;\n    }\n    days += 7 * (weekOfYear - 1);\n    if (days !== 0) {\n      gc.add(DAY_OF_YEAR, days);\n    } else {\n      gc.complete();\n    }\n    fields[YEAR] = gc.get(YEAR);\n    fields[MONTH] = gc.get(MONTH);\n    fields[DAY_OF_MONTH] = gc.get(DAY_OF_MONTH);\n    this.complete();\n  },\n  /*\n   * Creates and returns a copy of this object.\n   * @returns {Date.Gregorian}\n   */\n  clone: function clone() {\n    if (this.time === undefined) {\n      this.computeTime();\n    }\n    var cal = new GregorianCalendar(this.locale);\n    cal.setTimezoneOffset(cal.getTimezoneOffset());\n    cal.setFirstDayOfWeek(cal.getFirstDayOfWeek());\n    cal.setMinimalDaysInFirstWeek(cal.getMinimalDaysInFirstWeek());\n    cal.setTime(this.time);\n    return cal;\n  },\n\n  /*\n   * Compares this GregorianCalendar to the specified Object.\n   * The result is true if and only if the argument is a GregorianCalendar object\n   * that represents the same time value (millisecond offset from the Epoch)\n   * under the same Calendar parameters and Gregorian change date as this object.\n   * @param {Date.Gregorian} obj the object to compare with.\n   * @returns {boolean} true if this object is equal to obj; false otherwise.\n   */\n  equals: function equals(obj) {\n    return this.getTime() === obj.getTime() && this.firstDayOfWeek === obj.firstDayOfWeek && this.timezoneOffset === obj.timezoneOffset && this.minimalDaysInFirstWeek === obj.minimalDaysInFirstWeek;\n  },\n\n  compareToDay: function compareToDay(d2) {\n    var d1Year = this.getYear();\n    var d2Year = d2.getYear();\n    var d1Month = this.getMonth();\n    var d2Month = d2.getMonth();\n    var d1Day = this.getDayOfMonth();\n    var d2Day = d2.getDayOfMonth();\n    if (d1Year !== d2Year) {\n      return d1Year - d2Year;\n    }\n    if (d1Month !== d2Month) {\n      return d1Month - d2Month;\n    }\n    return d1Day - d2Day;\n  },\n\n  /*\n   * Sets all the calendar field values or specified field and the time value\n   * (millisecond offset from the Epoch) of this Calendar undefined.\n   * This means that isSet() will return false for all the calendar fields,\n   * and the date and time calculations will treat the fields as if they had never been set.\n   * @param [field] the calendar field to be cleared.\n   */\n  clear: function clear(field) {\n    if (field === undefined) {\n      this.field = [];\n    } else {\n      this.fields[field] = undefined;\n    }\n    this.time = undefined;\n    this.fieldsComputed = false;\n  },\n\n  toString: function toString() {\n    // for debug\n    var v = this;\n    return '[GregorianCalendar]: ' + v.getYear() + '/' + v.getMonth() + '/' + v.getDayOfMonth() + ' ' + v.getHourOfDay() + ':' + v.getMinutes() + ':' + v.getSeconds();\n  }\n};\n\nvar GregorianCalendarProto = GregorianCalendar.prototype;\n\nUtils.each(FIELDS, function (f, index) {\n  if (f) {\n    GregorianCalendarProto['get' + f] = function get() {\n      return this.get(index);\n    };\n\n    GregorianCalendarProto['isSet' + f] = function isSet() {\n      return this.isSet(index);\n    };\n\n    GregorianCalendarProto['set' + f] = function set(v) {\n      return this.set(index, v);\n    };\n\n    GregorianCalendarProto['add' + f] = function add(v) {\n      return this.add(index, v);\n    };\n\n    GregorianCalendarProto['roll' + f] = function roll(v) {\n      return this.roll(index, v);\n    };\n\n    GregorianCalendarProto['rollSet' + f] = function rollSet(v) {\n      return this.rollSet(index, v);\n    };\n  }\n});\n\nmodule.exports = GregorianCalendar;\n/*\n http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html\n\n TODO\n - day saving time\n - i18n\n - julian calendar\n */"]},"metadata":{},"sourceType":"script"}